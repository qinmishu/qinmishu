---
title: "ARM汇编语言编程"
author: "秦米书"
date: "2023-04-06"
categories: [arm, assembly, raspberry-pi]
image: "image.jpg"
format: 
  html:
    toc: true 
editor: visual
jupyter: julia-1.8
---

## Reference 

[ARM assembler in Raspberry Pi](https://thinkingeek.com/arm-assembler-raspberry-pi/)

## 01 - first arm assembly program 

first.s
```asm
.global main 

main: 
	mov r0, #3 /* r0 is a register, #3 is an immediate value */
	bx lr /*branch and exchange, link register*/
```

## 02 - Registers and basic arithmetic 

sum01.s 
```asm
/* 
	Registers and basic arithmetic 
	
	r0 - r15, 32 bits integer registers in Raspberry PI; 
	
	32 floating point registers; 
	
	A program to add r1 and r2 and put the result to r0; 
	
	A program to add r0 and r1 and put the result to r0; 

*/ 

.global main 

main: 
	mov r1, #3
	mov r2, #4 
	add r0, r1, r2 
	bx lr /* link register */
```

sum02.s 
```asm

/* 
	Registers and basic arithmetic 
	
	r0 - r15, 32 bits integer registers in Raspberry PI; 
	
	32 floating point registers; 
	
	A program to add r1 and r2 and put the result to r0; 
	
	A program to add r0 and r1 and put the result to r0; 

*/ 

.global main 

main: 
	mov r0, #4
	mov r1, #5
	add r0, r0, r1
	bx lr /* link register */
```

## 03 - Memory, addresses. Load and store.

load01.s 
```asm 
/*
	Memory, addresses. Load and store.
	
	Difference between x86 and ARM(Advanced RISC Machines)  
	
	ldr: load to register 
	str: store from register 
	
	Address, Labels 
	
	Code, Data 
	
	.balign byte align 
	.word 
	
	Sections: .text, .data 
	
	load01.s & store01.s 
*/

.data 

.balign 4 
var1: 
	.word 3 
	
.balign 4 	
var2:
	.word 6 

.text 
.balign 4 
.global main 
main: 
	ldr r1, addr_var1
	ldr r1,[r1]
	
	ldr r2, addr_var2
	ldr r2,[r2]
	
	add r0,r1,r2 
	bx lr 
	
	
addr_var1: 
	.word var1 
addr_var2: 
	.word var2 	

```

store01.s 
```asm 
/*
	Memory, addresses. Load and store.
	
	Difference between x86 and ARM(Advanced RISC Machines)  
	
	ldr: load to register 
	str: store from register 
	
	Address, Labels 
	
	Code, Data 
	
	.balign byte align 
	.word 
	
	Sections: .text, .data 
	
	load01.s & store01.s 
*/

.data 

.balign 4 
var1: 
	.word 0 
	
.balign 4 	
var2:
	.word 0  

.text 
.balign 4 
.global main 
main: 
	mov r3, #6
	
	ldr r1, addr_var1
	str r3, [r1]
	
	mov r3, #9
	
	ldr r1, addr_var2
	str r3, [r1]

	ldr r1, addr_var1
	ldr r1,[r1]
	
	ldr r2, addr_var2
	ldr r2,[r2]
	
	add r0,r1,r2 
	bx lr 
	
	
addr_var1: 
	.word var1 
addr_var2: 
	.word var2 	

```

## 04 - GDB 

start

stepi 

info registers 

continue 

print 

disassemble 

## 05 - Branches 

branch01.s 

```asm 
/*
r0 - r15 
r13: sp, stack pointer  
r14: link register 
r15: pc, program counter, IP, instruction pointer 
b: branch 
cmp: compare 
cpsr: current progrm status register 
N (negative), Z (zero), C (carry) and V (overflow)
*/

.text 
.global main 
main: 
	mov r0, #2
	b end 
	mov r0, #3 
end:
	bx lr 

```

compare00.s 

```asm 
/*
demonstrate how subtract operation affects the Carry bit of cpsr 
*/
.text 
.global main 
main: 
	mov r1, #2 
	mov r2, #1 
	cmp r1, r2 
	mov r0, #0 
	bx lr 
```

compare01.s 

```asm
/*
*/
.text 
.global main 
main: 
	mov r1, #3 
	mov r2, #2 
	cmp r1, r2 
	beq case_eq
case_neq: 
	mov r0, #6  
	b end 
case_eq: 
	mov r0, #5
end: 
	bx lr 

```

cpsr_decode.py 

```Python 
cpsr = 0x20000010
#cpsr is an integer 
def cpsr_decode(cpsr):
    bit_names = {} 
    bit_names["n_bit"] = 0x80_00_00_00 #negative
    bit_names["z_bit"] = 0x40_00_00_00 #zero 
    bit_names["c_bit"] = 0x20_00_00_00 #carry 
    bit_names["v_bit"] = 0x10_00_00_00 #overflow
    
    for name,bit in bit_names.items():
        if cpsr & bit != 0:
            print(name,"is set")
        else:
            print(name,"is not set")

cpsr_decode(cpsr) 
```

## 06 - Control structures

if01.s

```asm 
.text 
.global main 
/* check if the number in r1 is odd or even*/
main:
    mov r1, #2022

if:
    tst r1, #1 /* cpsr: current program status register*/
    bne else
then: /* r1 is even */
    mov r0, #2
    b end_if 
else: /* r1 is odd */ 
    mov r0, #1
end_if:
    bx lr 

```

loop01.s

```asm
.text 
.global main
/* calculate the sum 1..22 */ 
main: 
    mov r1, #0 /* store sum */ 
    mov r2, #1 /* counter */ 
loop: 
    cmp r2, #22 /* cpsr updated */ 
    bgt end_loop 
    add r1, r1, r2 
    add r2, r2, #1 
    b loop 
end_loop:
    mov r0, r1 
    bx lr 

``` 

## 07 - Indexing modes

shift01.s

```asm
/*
ARM assembler in Raspberry Pi

07 Indexing modes: 
Allowed operands in instructions are collectively called indexing modes 


shifted operand 

operator/operand 

ldr, str, bxx 

mov

add, sub, rsb, cmp, and, tst

register/immediate values 

Syntax of most of the ARM instructions:
instruction Rdest, Rsource1, source2

source2 is either a register or an immediate value

When source2 is a register, we can combine it with a shift operation. 

LSL #n
LSL Rsource3 

LSR #n
LSR Rsource3 

ASR #n
ASR Rsource3 

ROR #n 
ROR Rsource3 

#n can be 1..31. shift is an operation instead of an instruction. shift operation can be used to perform multiplication and division. 
*/

.text 
.global main 
main: 
    mov r0,#2
    /*add r0, r0, r0, lsl #1*/
    mov r0,r0,lsl #2
    bx lr 
```

## 08-数组和结构体

以下内容为学习<https://thinkingeek.com/2013/01/27/arm-assembler-raspberry-pi-chapter-8/>的摘录.

### 索引模式的定义

These sets of allowed operands in instructions are collectively called indexing modes.

### 什么是数组

An array is a sequence of items of the same kind in memory.

## 09-函数

以下内容为学习<https://thinkingeek.com/2013/02/02/arm-assembler-raspberry-pi-chapter-9/>的摘录.

Functions are a way to reuse code.

AAPCS:Procedure Call Standard for ARM Architecture

| Register | Register Alias | Description                     | Remark |
|----------|----------------|---------------------------------|--------|
| r15      | pc             | Program Counter                 |        |
| r14      | lr             | Link Register                   |        |
| r13      | sp             | Stack Pointer                   |        |
|          | cpsr           | Current Program Status Register |        |

Functions can receive parameters. The first 4 parameters must be stored, sequentially, in the registers `r0`, `r1`, `r2` and `r3`.

### Well behaved functions

A function must adhere, at least, to the following rules if we want it to be AAPCS compliant.

-   A function should not make any assumption on the contents of the `cpsr`. So, at the entry of a function condition codes N, Z, C and V are unknown.

-   A function can freely modify registers `r0`, `r1`, `r2` and `r3`.

-   A function cannot assume anything on the contents of `r0`, `r1`, `r2` and `r3` unless they are playing the role of a parameter.

-   A function can freely modify `lr` but the value upon entering the function will be needed when leaving the function (so such value must be kept somewhere).

-   A function can modify all the remaining registers as long as their values are restored upon leaving the function. This includes `sp` and registers `r4` to `r11`.

-   This means that, after calling a function, we have to assume that (only) registers `r0`, `r1`, `r2`, `r3` and `lr` have been overwritten.

### Calling a function

direct call:

```         
bl label
```

indirect call(first storing the address of the function into a register):

```         
blx Rsource1 /* Rsource1 means register operand1 */
```

In both cases the behaviour is as follows: the address of the function (immediately encoded in the bl or using the value of the register in blx) is stored in pc. The address of the instruction following the bl or blx instruction is kept in lr.

### Leaving a function

A well behaved function, as stated above, will have to keep the initial value of lr somewhere. When leaving the function, we will retrieve that value and put it in some register (it can be lr again but this is not mandatory). Then we will bx Rsource1 (we could use blx as well but the latter would update lr which is useless here).

### Returning data from functions

Functions must use r0 for data that fits in 32 bit (or less). This is, C types char, short, int, long (and float though we have not seen floating point yet) will be returned in r0. For basic types of 64 bit, like C types long long and double, they will be returned in r1 and r0. Any other data is returned through the stack unless it is 32 bit or less, where it will be returned in r0.

### Hello world (puts)

```asm
/* -- hello01.s */
.data

greeting:
 .asciz "Hello world"

.balign 4
return: .word 0

.text

.global main
main:
    ldr r1, address_of_return     /*   r1 ← &address_of_return */
    str lr, [r1]                  /*   *r1 ← lr */

    ldr r0, address_of_greeting   /* r0 ← &address_of_greeting */
                                  /* First parameter of puts */

    bl puts                       /* Call to puts */
                                  /* lr ← address of next instruction */

    ldr r1, address_of_return     /* r1 ← &address_of_return */
    ldr lr, [r1]                  /* lr ← *r1 */
    bx lr                         /* return from main */
address_of_greeting: .word greeting
address_of_return: .word return

/* External */
.global puts
```

### Interaction (scanf, printf)

```asm
/* -- printf01.s */
.data

/* First message */
.balign 4
message1: .asciz "Hey, type a number: "

/* Second message */
.balign 4
message2: .asciz "I read the number %d\n"

/* Format pattern for scanf */
.balign 4
scan_pattern : .asciz "%d"

/* Where scanf will store the number read */
.balign 4
number_read: .word 0

.balign 4
return: .word 0

.text

.global main
main:
    ldr r1, address_of_return        /* r1 ← &address_of_return */
    str lr, [r1]                     /* *r1 ← lr */

    ldr r0, address_of_message1      /* r0 ← &message1 */
    bl printf                        /* call to printf */

    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */
    ldr r1, address_of_number_read   /* r1 ← &number_read */
    bl scanf                         /* call to scanf */

    ldr r0, address_of_message2      /* r0 ← &message2 */
    ldr r1, address_of_number_read   /* r1 ← &number_read */
    ldr r1, [r1]                     /* r1 ← *r1 */
    bl printf                        /* call to printf */

    ldr r0, address_of_number_read   /* r0 ← &number_read */
    ldr r0, [r0]                     /* r0 ← *r0 */

    ldr lr, address_of_return        /* lr ← &address_of_return */
    ldr lr, [lr]                     /* lr ← *lr */
    bx lr                            /* return from main using lr */
address_of_message1 : .word message1
address_of_message2 : .word message2
address_of_scan_pattern : .word scan_pattern
address_of_number_read : .word number_read
address_of_return : .word return

/* External */
.global printf
.global scanf
```

### First function (multiply by 5) 

```asm
/* -- printf02.s */
.data

/* First message */
.balign 4
message1: .asciz "Hey, type a number: "

/* Second message */
.balign 4
message2: .asciz "%d times 5 is %d\n"

/* Format pattern for scanf */
.balign 4
scan_pattern : .asciz "%d"

/* Where scanf will store the number read */
.balign 4
number_read: .word 0

.balign 4
return: .word 0

.balign 4
return2: .word 0

.text

/*
mult_by_5 function
*/
mult_by_5: 
    ldr r1, address_of_return2       /* r1 ← &address_of_return */
    str lr, [r1]                     /* *r1 ← lr */

    add r0, r0, r0, LSL #2           /* r0 ← r0 + 4*r0 */

    ldr lr, address_of_return2       /* lr ← &address_of_return */
    ldr lr, [lr]                     /* lr ← *lr */
    bx lr                            /* return from main using lr */
address_of_return2 : .word return2

.global main
main:
    ldr r1, address_of_return        /* r1 ← &address_of_return */
    str lr, [r1]                     /* *r1 ← lr */

    ldr r0, address_of_message1      /* r0 ← &message1 */
    bl printf                        /* call to printf */

    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */
    ldr r1, address_of_number_read   /* r1 ← &number_read */
    bl scanf                         /* call to scanf */

    ldr r0, address_of_number_read   /* r0 ← &number_read */
    ldr r0, [r0]                     /* r0 ← *r0 */
    bl mult_by_5

    mov r2, r0                       /* r2 ← r0 */
    ldr r1, address_of_number_read   /* r1 ← &number_read */
    ldr r1, [r1]                     /* r1 ← *r1 */
    ldr r0, address_of_message2      /* r0 ← &message2 */
    bl printf                        /* call to printf */

    ldr lr, address_of_return        /* lr ← &address_of_return */
    ldr lr, [lr]                     /* lr ← *lr */
    bx lr                            /* return from main using lr */
address_of_message1 : .word message1
address_of_message2 : .word message2
address_of_scan_pattern : .word scan_pattern
address_of_number_read : .word number_read
address_of_return : .word return

/* External */
.global printf
.global scanf
```
