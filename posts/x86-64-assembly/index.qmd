---
title: "x86-64汇编语言编程"
author: "秦米书"
date: "2023-10-21"
categories: [x86-64, assembly, linux]
image: "image.jpg"
format: 
  html:
    toc: true 
    toc-depth: 7 

jupyter: julia-1.8
code-line-numbers: true
---

This is a note while studying x86-64 assembler.

# References 

[linux syscall table](https://filippo.io/linux-syscall-table/) 

[ascii table](https://www.asciitable.com/)

[gnu assembler, or gas, or as](https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_7.html)

# General Notes

## misc 

GCC(Gnu Compiler Collection) is a front end. It will call `as` and `ld`. The process can be viewed if we use `-v` argument of gcc. 

Using `-g` argument will embed debug info in the object file. E.g. `gcc -c first.s -o first.o -g`. After that, we are able to use `list` in GDB to view the source code. 

Below table lists the size of x86-64 memory/registers. Some is different from ARM. For example, in ARM, A `.word` means 32 bits. 

| term | size (bits) |
|------|------|
| byte     |  8    |
| word     |  16    |
| dword     | 32     |
| qword     | 64     |

In x86-64, use `.long` or `.int` to specify 64 bits integer. In ARM, use `.word` to specify 32 bits integer. Note, `.word` or `.short` may have different lengths in different machine. They are machine dependent. 

STDIN file descriptor is 0. STDOUT file descriptor is 1.  STDERR file descriptor is 2. 

The labels in the assembly program begins with `_`, e.g. `_start`, is due to the convention of C compiler. It is the simple name mangaling. `C++` has more complex name mangling.  

## Hello world program x86-64 

The program is copied from [x86-64 Assembly on youtube, from Mike Shah](https://www.youtube.com/watch?v=3nYHV5zIQGA&list=PLvv0ScY6vfd9BSBznpARlKGziF1xrlU54&index=1)

It refers to the [linux syscall table](https://filippo.io/linux-syscall-table/)

In intel format. 
```ASM
/*first.s*/
.intel_syntax noprefix
.global _start 
.hello.str: 
	.ascii "12345678\n" 
str_len: equ $-.hello.str ;didn't test if it works in GNU AS 

.text 

_start: 
	push rbp
	movq rbp, rsp 
	
	movq rax, 1  
	movq rdi, 1  
	leaq rsi, .hello.str  
	movq rdx, str_len ;didn't test if it works in GNU AS 
	syscall 
	
	movq rax, 60  
	movq rdi, 0  
	syscall 
	
	pop rbp 
```

To build it. 

```bash 
as -o first.o first.s 
ld -o first first.o 
```

In AT&T format. 
```ASM 
/*first.s*/

.global _start 
.hello.str: 
	.ascii "12345678\n" 

.text 

_start: 
	movq %rsp, %rbp 
	movq $1, %rax    
	movq $1, %rdi   
	leaq .hello.str, %rsi    
	movq $9, %rdx  
	syscall 
	
	movq $60, %rax  
	movq $0, %rdi   
	syscall 
	
	pop %rbp 
```

To build it. The below 2 ways are both OK. 
```bash
as -o first.o first.s 
ld -o first first.o 

gcc -c first.s -o first.o 
ld -o first first.o 
```

## Hello world program X86 32 bit 

The 32 bit hello world program and the 64 bit counterpart both use syscall to write to the screen and exit the program. But the 32 bit and 64 bit have different call conventions, and the syscall table are different in 32 bit and 64 bit too. 

Refer to [32 bit syscall table](https://syscalls32.paolostivanin.com/). 


In 32 bit, the EXIT syscall is 1, while in 64 bit it is 60. 

In 32 bit, the WRITE syscall is 4, while in 64 bit it is 1. 

In 32 bit, the EAX, EBX, ECX, EDX, ESI, EDI in sequence are used to specify the SYSCALL code and arguments. 

In 64 bit, the RAX, RDI, RSI, RDX, RCX, R8, R9 in sequence are used to specify the SYSCALL code and arguments. 

In 32 bit, the `syscall` instruction is not available. It will report illegal instruction if we use it. 

Refer to [stackoverflow on syscall and sysenter](https://stackoverflow.com/questions/12806584/what-is-better-int-0x80-or-syscall-in-32-bit-code-on-linux). 

- syscall is the default way of entering kernel mode on x86-64. This instruction is not available in 32 bit modes of operation on Intel processors.
- sysenter is an instruction most frequently used to invoke system calls in 32 bit modes of operation. It is similar to syscall, a bit more difficult to use though, but that is the kernel's concern.
int 0x80 is a legacy way to invoke a system call and should be avoided.
- The preferred way to invoke a system call is to use vDSO(virtual dynamic shared object), a part of memory mapped in each process address space that allows to use system calls more efficiently (for example, by not entering kernel mode in some cases at all). vDSO also takes care of more difficult, in comparison to the legacy int 0x80 way, handling of syscall or sysenter instructions.

Note: In 32 bit, it uses STACK to specify arguments when calling a function. In 64 bit, it uses the 6 registers to specify the first 6 arguments, and the stack to specify the remaining arguments. 

Note: `int $0x80` and `sysenter` does not mean the same thing in 32 bit. Refer to [the definitive guide to linux system calls](https://blog.packagecloud.io/the-definitive-guide-to-linux-system-calls/). 

The below program is proved OK in my 32 bit Ubuntu. 

```ASM
.data
hello: .ascii "hello world\n"
.bss
.text

.global _start
    // output hello world to screen
_start:
    push %ebp  ;//preserve ebp
    movl %esp, %ebp ;//put the current esp to ebp
    movl $1, %ebx ;//put STDOUT file descriptor to %ebx
    leal hello, %ecx  ;//put address of the str to %ecx
    movl $12, %edx ;//put the length of the str to %edx
    movl $4, %eax  ;//put the WRITE syscall number to eax
    int $0x80

    // exit the program
    movl $0, %ebx ;//put the exit code to ebx
    movl $1, %eax ;//put the EXIT syscall number to eax
    int $0x80
    pop %ebp
``` 

## call instruction to call a function 

```ASM
/*first.s*/
# there is also .bss segment for not initialized global data 
.data 
.hello.str: 
	.ascii "12345678\n" 

.text 

_write_str: 
	movq %rsp, %rbp 
	movq $1, %rax    
	movq $1, %rdi   
	leaq .hello.str, %rsi    
	movq $9, %rdx  
	syscall 
	ret 
_exit:
	movq $60, %rax  
	movq $0, %rdi   
	syscall 
	ret 

.global _start 
_start: 
	call _write_str 
	call _exit 
	pop %rbp 
```

## The 64 bit x86 C Calling Convention 
The section is copied from [x86-64 call convention](https://aaronbloomfield.github.io/pdr/book/x86-64bit-ccc-chapter.pdf). It is for Linux. Microsoft windows does not follow the same convention. Refer to [x64 calling convention, Microsoft](https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170).  

pop, push, call, ret instructions. 

The caller's rules: 

1. Before calling a subroutine, the caller should save the contents of certain registers that are designated
caller-saved. The caller-saved registers are r10, r11, and any registers that parameters are put into. If
you want the contents of these registers to be preserved across the subroutine call, push them onto
the stack.

2. To pass parameters to the subroutine, we put up to six of them into registers (in order: rdi, rsi,
rdx, rcx, r8, r9). If there are more than six parameters to the subroutine, then push the rest onto
the stack in reverse order (i.e. last parameter first) – since the stack grows down, the first of the
extra parameters (really the seventh parameter) parameter will be stored at the lowest address (this
inversion of parameters was historically used to allow functions to be passed a variable number of
parameters).

3. To call the subroutine, use the `call` instruction. This instruction places the return address on top of
the parameters on the stack, and branches to the subroutine code.

4. After the subroutine returns, (i.e. immediately following the call instruction) the caller must remove
any additional parameters (beyond the six stored in registers) from stack. This restores the stack to
its state before the call was performed.

5. The caller can expect to find the return value of the subroutine in the register RAX.

6. The caller restores the contents of caller-saved registers (r10, r11, and any in the parameter passing
registers) by popping them off of the stack. The caller can assume that no other registers were
modified by the subroutine.

The Callee's Rules: 

1. Allocate local variables by using registers or making space on the stack. Recall, the stack grows
down, so to make space on the top of the stack, the stack pointer should be decremented. The
amount by which the stack pointer is decremented depends on the number of local variables needed.
For example, if a local float and a local long (12 bytes total) were required, the stack pointer
would need to be decremented by 12 to make space for these local variables: `sub rsp, 12`.  As with parameters, local variables will be located at known offsets from the stack pointer.

2. Next, the values of any registers that are designated callee-saved that will be used by the function
must be saved. To save registers, push them onto the stack. The callee-saved registers are RBX, RBP,
and R12 through R15 (RSP will also be preserved by the call convention, but need not be pushed on
the stack during this step). After these three actions are performed, the actual operation of the subroutine may proceed. When
the subroutine is ready to return, the call convention rules continue. 

3. When the function is done, the return value for the function should be placed in RAX if it is not
already there. 

4. The function must restore the old values of any callee-saved registers (RBX, RBP, and R12 through
R15) that were modified. The register contents are restored by popping them from the stack. Note,
the registers should be popped in the inverse order that they were pushed.

5. Next, we deallocate local variables. The easiest way to do this is to add to RSP the same amount
that was subtracted from it in step 1. 

6. Finally, we return to the caller by executing a ret instruction. This instruction will find and remove
the appropriate return address from the stack.

If you look at the assembly generated by some compilers, you will see a few extra commands in there
in the callee’s prologue:

```ASM
push rbp ; at the start of the callee 
mov rbp, rsp
... 
pop rbp ; just before the ending `ret` 
```

This code is unnecessary, and is a hold-over from the 32-bit calling convention. You can tell the compiler to not include this code by invoking it with the `-fomit-frame-pointer` flag.

It might be noted that the callee’s rules fall cleanly into two halves that are basically mirror images of
one another. The first half of the rules apply to the beginning of the function, and are therefor commonly
said to define the prologue to the function. The latter half of the rules apply to the end of the function, and
are thus commonly said to define the epilogue of the function.

## The 32 bit x86 C calling Convention 
The section is copied from [x86 32 bit call convention](https://aaronbloomfield.github.io/pdr/book/x86-32bit-ccc-chapter.pdf). 

The Caller's Rules 

1. Bfore calling a subroutine, the caller should save the contents of certain registers that are designated caller-saved. The caller-saved registers are EAX, ECX, EDX. If you want the contents of these
registers to be preserved across the subroutine call, push them onto the stack

2.  To pass parameters to the subroutine, push them onto the stack before the call. The parameters
should be pushed in inverted order (i.e. last parameter first) – since the stack grows down, the first
parameter will be stored at the lowest address (this inversion of parameters was historically used to
allow functions to be passed a variable number of parameters). 

3. To call the subroutine, use the call instruction. This instruction places the return address on top of
the parameters on the stack, and branches to the subroutine code.

4. After the subroutine returns, (i.e. immediately following the call instruction) the caller must remove
the parameters from stack. This restores the stack to its state before the call was performed.

5. The caller can expect to find the return value of the subroutine in the register EAX.

6.  The caller restores the contents of caller-saved registers (EAX, ECX, EDX) by popping them off of
the stack. The caller can assume that no other registers were modified by the subroutine. 

The Callee's Rules 

1. At the beginning of the subroutine, the function should push the value of EBP onto the stack, and
then copy the value of ESP into EBP using the following instructions:

```ASM
push ebp 
mov ebp, esp ;Intel style instead of AT&T style 
```

The reason for this initial action is the maintenance of the base pointer, EBP. The base pointer is
used by convention as a point of reference for finding parameters and local variables on the stack.
Essentially, when any subroutine is executing, the base pointer is a “snapshot” of the stack pointer
value from when the subroutine started executing. Parameters and local variables will always be
located at known, constant offsets away from the base pointer value. We push the old base pointer
value at the beginning of the subroutine so that we can later restore the appropriate base pointer
value for the caller when the subroutine returns. Remember, the caller isn’t expecting the subroutine
to change the value of the base pointer. We then move the stack pointer into EBP to obtain our point
of reference for accessing parameters and local variables. 

2.  Next, allocate local variables by making space on the stack. Recall, the stack grows down, so to
make space on the top of the stack, the stack pointer should be decremented. The amount by which
the stack pointer is decremented depends on the number of local variables needed. For example, if
3 local integers (4 bytes each) were required, the stack pointer would need to be decremented by 12
to make space for these local variables. I.e.: 

```ASM
sub esp, 12 
``` 

As with parameters, local variables will be located at known offsets from the base pointer.

3. Next, the values of any registers that are designated callee-saved that will be used by the function
must be saved. To save registers, push them onto the stack. The callee-saved registers are EBX, EDI
and ESI (ESP and EBP will also be preserved by the call convention, but need not be pushed on the
stack during this step).
After these three actions are performed, the actual operation of the subroutine may proceed. When
the subroutine is ready to return, the call convention rules continue:

4. When the function is done, the return value for the function should be placed in EAX if it is not
already there.

5. The function must restore the old values of any callee-saved registers (EBX, EDI and ESI) that were
modified. The register contents are restored by popping them from the stack. Note, the registers
should be popped in the inverse order that they were pushed. 

6. Next, we deallocate local variables. The obvious way to do this might be to add the appropriate
value to the stack pointer (since the space was allocated by subtracting the needed amount from the
stack pointer). In practice, a less error-prone way to deallocate the variables is to move the value in
the base pointer into the stack pointer, i.e.:

```ASM
mov esp, ebp 
```

This trick works because the base pointer always contains the value that the stack pointer contained
immediately prior to the allocation of the local variables.

7. Immediately before returning, we must restore the caller’s base pointer value by popping EBP off
the stack. Remember, the first thing we did on entry to the subroutine was to push the base pointer
to save its old value.

8. Finally, we return to the caller by executing a ret instruction. This instruction will find and remove
the appropriate return address from the stack.

# Book Programming from the Ground Up by Jonathan Bartlett (Author)
Programming from the Ground Up uses Linux assembly language to teach new programmers the most important concepts in programming. 

# Book Professional Assembly Language by Richard Blum (Good)
 
It is said that it uses the AT&T syntax. And uses the GNU AS assembler. But seems it is for 32 bit X86. After knowing the differences of call conventions between x86-64 and x86-32, it does not matter. Refer to [install a 32-bit ubuntu in a 64-bit host via virtual box](https://askubuntu.com/questions/344976/can-i-install-32-bit-ubuntu-in-a-64-bit-host-using-virtualbox)

Use vagrant to install a 32 bit of ubuntu in virtul box. 

```default 
//put the Vagrantfile in a folder and 'run vagrant up'. 
//run 'vagrant ssh' to login to the VM. It is a terminal interface without GUI. 
//default user and passwd is vagrant/vagrant. 
//A folder /vagrant is mounted to refer to the folder in the host machine where the Vagrantfile locates. 
// run `sudo apt install gdb` to install gdb for debugging   
Vagrant.configure("2") do |config|
  config.vm.box = "reelio/trusty32"
  config.vm.box_version = "0.0.1"
end
```

# Book Beginning x64 Assembly Programming by Jo Van Hoey
It includes introductions on asm on both Linux and Windows. It also include some advanced instructions for example AVX, SSE, etc. 

# Book X64 Assembly Language Step by Step 
Notes while I read the book. 

## Chap1 It's all in the Plan: Understanding What Computers Really Do 

A computer program is a list of steps and tests, nothing more. 

A test is the sort of either/or decision we make. 
- First, you take a look at sth that can go one of two way. 
- Then you do one of two things, depending on what you saw when you took a look. 

## Chap2 Allien Bases: Getting Your Arms Around Binary and Hexadecimal 

octal 

hexadecimal 

binary 

## Chap3 Lifting the Hood: Discovering What Computers Actually Are 

A bit is a single binary digit, either 1 or 0. 

A byte is eight bits. 

Two bytes side by side are called a word. 

Two words side by side are called a double word. 

A quad word consists of two double words. 

A group of four bits is called a nybble. 

## Chap4 Location: Registers, Memory Addressing, and Knowing Where Things Are 

The skill of assembly language consists of a deep comprehension of memory addressing. Everything else is details -- and easy details, at that. 

There are a fair number of different ways to address memory in the Intel/AMD CPU family. Each of these ways is called a Memory Model. There are 3 major memory models that you can use with the more recent members of the Intel family, and a number of minor variations on those three, especially the one in the middle. 

Real mode flat model. 

Real mode segmented model. 

Protected-mode flat model(32-bit and 64-bit). 

The 8080 was an 8-bit CPU(its general-purpose registers have 8-bits), meaning that it processed 8 bits of information at a time. However, it had 16 address lines coming out of it(it will address 64KB). 

The 8080 memory-addressing scheme was very simple. You put a 16-bit address out on the address lines, and you got back the 8-bit value that was stored at that address. 

The 8086 comes after 8080. It is 16-bit CPU. It has 20 address lines.

The 8080 is used a lot. Intel wanted to make it easy for people to translate older software from the 8080 to 8086. One way to do this was to make sure that a 16-bit addressing system such as that of the 8080 still worked.  Even though the 8086 could address 16 times as much memory as the 8080(16x64KB=1MB), Intel setup the 8086 so that a program could take some 64 KB segment within that megabyte of memory and run entirely inside it, just as though it were the smaller 8080 memory system. This was done by the use of segment registers. 

Speaking of the 8086 and 8088, there are 4 segment registers(CS, DS, ...). 

This was very wise short-term thinking and catastrophically bad long-term thinking. Programs that needed more than 64KB of memory at a time had to use memory in 64KB chunks, switching between chunks by switching values into and out of segment registers. 

To maintain backward compatibility with the ancient 8086 and 8088, newer CPUs were given the power to limit themselves to what the older chips could address and execute. When a Pentium-class or better CPU needs to run software written for the real-mode segmented model, it pulls a neat trick that, temporarily, make it become an 8086. This was called virtual-86 mode, and it provided excellent backward compatibility for DOS software. 

A segment may start every 16 bytes throughout the full megabyte of real memory. 

CS, DS, SS, ES, FS, GS: Segment registers. All segment registers are 16 bits in size, irrespective of the CPU. FS and GS exist only in the 386 and later Intel x86 32-bit CPUs. 

CS: Code Segment 

DS: Data Segment 

SS: Stack Segment 

ES: Extra segment 

FS, GS: Clones of ES 

Segment registers become useless in application programming in X86-64. Operating systems use two of them for special purposes. 

Do Intel's x86-64 CPUs have 64 address lines? No (48 or 52). 

In the x86-64 world, CPUs have 14 general purpose 64-bit registers, plus SP and BP. 

There are eight 16-bit general-purpose registers: AX, BX, CX, DX, BP, SI, DI, SP (8086, 8088, 80186 and 80286). 

EAX, EBX, ECX, EDX, EBP, ESI, EDI, ESP. (32 bitS)

RAX, RBX, RCX, RDX, RBP, RSI, RDI, RSP. R8 to R15. (64 BITS)

RAX(EAX(AX(AH,AL)))

RBX(EBX(BX(BH,BL)))

RCX(ECX(CX(CH,CL)))

RDX(EDX(DX(DH,DL)))

RSI(ESI(SI(SIL))) and so on for RDI, RSP. 

RIP, EIP, IP 

The new x64 registers R8-R15 can be addressed as 64 bits, 32 bits, 16 bits, and 8 bits. However, the AH/AL scheme for the low 16 bits is a trick reserved for only RAX-RDX. The naming scheme for the R registers provides a mnemonic: D for double word, W for word, and B for byte. For example, if you want to deal with the lowest 8 bits of R8, you use the name R8B. Don’t make the beginner’s mistake of assuming that R8, R8D, R8W, and R8B are four separate and independent registers! A better metaphor is to think of the register names as country/state/county/city. 

IP register. 

While executing a program, the CPU uses IP to keep track of where it is in the current code segment. Instructions come in different sizes, ranging typically from 1 to 15 bytes. The CPU knows the size of each instruction it executes.

IP is notable in being the only register that can neither be read nor written to directly.

Flags register. 

RFLAGS, EFLAGS, FLAGS. When the flag’s value is 1, we say that the flag is set. When the flag’s value is 0, we say that the flag is cleared.

Math Coprocessors and Their Registers (may be 128 bits or 256 bits)

Real-Mode Flat Model 

Real-Mode Segmented Model 

32-bit Protected Mode Flat Model 

64-bit Long Mode 

## Chap5 The Right to Assemble: The Process of Creating Assembly Language Programs 

Text files: are files that can be opened and examined meaningfully in a text editor, like notepad. 

Binary files: are files containing values that do not display meaningfully as text. 

Assemblers: read your source code files and generate an object code file containing the machine instructions that the CPU understands plus any data you've defined in your source code. 

Linker: Object code files cannot themselves be run as programs. An additional step, called linking, is necessary to turn object code files into executable program files.

Symbol table: To process several object modules into a single executable module, the linker must first build an index called a symbol table, with an entry for every named item in every object module it links, with information on what name (called a symbol) refers to what location within the module. 

Exe: Once the symbol table is complete, the linker builds an image of how the executable program will be arranged in memory when the operating system loads it. This image is then to disk as the executable file. The most important thing about the image that the linker builds relates to addresses.

Holes: Object modules are allowed to refer to symbols in other object modules. During assembly, these external references are left as holes to be filled later—naturally enough, because the module in which these external symbolsexist may not have been assembled or even written yet. As the linker builds animage of the eventual executable program file, it learns where all of the symbols are located within the image and thus can drop real addresses into all of the external reference holes.

Debugging info: Debugging information is, in a sense, a step backward. Portions of the source code, which was all stripped out early in the assembly process, are put back into the object module by the assembler. These portions of the source code are mostly the names of data items and procedures, and they’re embedded in the object file to make it easier for the programmer (you!) to see the names of data items when you debug the program.

Relocatability: Primordial microcomputers like 8080 systems running CP/M-80 had a simple memory architecture. Programs were written to be loaded and run at a specific physical memory address. For CP/M, this was 0100H. The programmer could assume that any program would start at 0100H and go up from there. Memory addresses of data items and procedures were actual physical addresses, and every time the program ran, its data items were loaded and referenced at precisely the same place in memory.
This all changed with the arrival of the 8086, and 8086-specific operating systems such as CP/M-86 and PC DOS. Improvements in the Intel architecture introduced with the 8086 made it unnecessary for the program to be assembled for running at any specific physical memory address. This feature is called relocatability and is a necessary part of any modern operating system, especially when multiple programs may be running at once. 

The author uses `nasm`. To compile an ASM file. Also `SASM` IDE for editing, building and debugging. `SASM` means SimpleAssembler.

```BASH
nasm -f elf64 -g -Fdwarf first.asm 
``` 

## Chap6 Linux and the Tools That Shape the Way You Work 
page 143 