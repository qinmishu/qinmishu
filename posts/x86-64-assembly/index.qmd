---
title: "x86-64汇编语言编程"
author: "秦米书"
date: "2023-10-21"
categories: [x86-64, assembly, linux]
image: "image.jpg"
format: 
  html:
    toc: true 
    toc-depth: 7 

jupyter: julia-1.8
code-line-numbers: true
---

This is a note while studying x86-64 assembler.

# References 

[linux syscall table](https://filippo.io/linux-syscall-table/) 

[ascii table](https://www.asciitable.com/)

[gnu assembler, or gas, or as](https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_7.html)

# Notes

GCC(Gnu Compiler Collection) is a front end. It will call `as` and `ld`. The process can be viewed if we use `-v` argument of gcc. 

Using `-g` argument will embed debug info in the object file. E.g. `gcc -c first.s -o first.o -g`. After that, we are able to use `list` in GDB to view the source code. 

Below table lists the size of x86-64 memory/registers. Some is different from ARM. For example, in ARM, A `.word` means 32 bits. 

| term | size (bits) |
|------|------|
| byte     |  8    |
| word     |  16    |
| dword     | 32     |
| qword     | 64     |

In x86-64, use `.long` or `.int` to specify 64 bits integer. In ARM, use `.word` to specify 32 bits integer. Note, `.word` or `.short` may have different lengths in different machine. They are machine dependent. 

STDIN file descriptor is 0. STDOUT file descriptor is 1.  STDERR file descriptor is 2. 

The labels in the assembly program begins with `_`, e.g. `_start`, is due to the convention of C compiler. It is the simple name mangaling. `C++` has more complex name mangling.  

## Hello world program 

The program is copied from [x86-64 Assembly on youtube, from Mike Shah](https://www.youtube.com/watch?v=3nYHV5zIQGA&list=PLvv0ScY6vfd9BSBznpARlKGziF1xrlU54&index=1)

It refers to the [linux syscall table](https://filippo.io/linux-syscall-table/)

In intel format. 
```ASM
/*first.s*/
.intel_syntax noprefix
.global _start 
.hello.str: 
	.ascii "12345678\n" 

.text 

_start: 
	movq rbp, rsp 
	movq rax, 1  
	movq rdi, 1  
	leaq rsi, .hello.str  
	movq rdx, 9  
	syscall 
	
	movq rax, 60  
	movq rdi, 0  
	syscall 
	
	pop rbp 
```

To build it. 

```bash 
as -o first.o first.s 
ld -o first first.o 
```

In AT&T format. 
```ASM 
/*first.s*/

.global _start 
.hello.str: 
	.ascii "12345678\n" 

.text 

_start: 
	movq %rsp, %rbp 
	movq $1, %rax    
	movq $1, %rdi   
	leaq .hello.str, %rsi    
	movq $9, %rdx  
	syscall 
	
	movq $60, %rax  
	movq $0, %rdi   
	syscall 
	
	pop %rbp 
```

To build it. The below 2 ways are both OK. 
```bash
as -o first.o first.s 
ld -o first first.o 

gcc -c first.s -o first.o 
ld -o first first.o 
```

## call 

```ASM
/*first.s*/
# there is also .bss segment for not initialized global data 
.data 
.hello.str: 
	.ascii "12345678\n" 

.text 

_write_str: 
	movq %rsp, %rbp 
	movq $1, %rax    
	movq $1, %rdi   
	leaq .hello.str, %rsi    
	movq $9, %rdx  
	syscall 
	ret 
_exit:
	movq $60, %rax  
	movq $0, %rdi   
	syscall 
	ret 

.global _start 
_start: 
	call _write_str 
	call _exit 
	pop %rbp 
```

# Book X64 Assembly Language Step by Step 

## Chap1 It's all in the Plan: Understanding What Computers Really Do 

A computer program is a list of steps and tests, nothing more. 

A test is the sort of either/or decision we make. 
- First, you take a look at sth that can go one of two way. 
- Then you do one of two things, depending on what you saw when you took a look. 

## Chap2 Allien Bases: Getting Your Arms Around Binary and Hexadecimal 

octal 

hexadecimal 

binary 

## Chap3 Lifting the Hood: Discovering What Computers Actually Are 

A bit is a single binary digit, either 1 or 0. 

A byte is eight bits. 

Two bytes side by side are called a word. 

Two words side by side are called a double word. 

A quad word consists of two double words. 

A group of four bits is called a nybble. 

## Chap4 Location: Registers, Memory Addressing, and Knowing Where Things Are 

