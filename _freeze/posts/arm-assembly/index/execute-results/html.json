{
  "hash": "4251e8ca219f76dd1d4d8c58b4e8e5eb",
  "result": {
    "markdown": "---\ntitle: ARM汇编语言编程\nauthor: 秦米书\ndate: '2023-04-06'\ncategories:\n  - arm\n  - assembly\n  - raspberry-pi\nimage: image.jpg\nformat:\n  html:\n    toc: true\n    toc-depth: 7\neditor: visual\n---\n\n## Reference \n\n[ARM assembler in Raspberry Pi](https://thinkingeek.com/arm-assembler-raspberry-pi/)\n\n## 01 - first arm assembly program \n\nfirst.s\n```asm\n.global main \n\nmain: \n\tmov r0, #3 /* r0 is a register, #3 is an immediate value */\n\tbx lr /*branch and exchange, link register*/\n```\n\n## 02 - Registers and basic arithmetic \n\nsum01.s \n```asm\n/* \n\tRegisters and basic arithmetic \n\t\n\tr0 - r15, 32 bits integer registers in Raspberry PI; \n\t\n\t32 floating point registers; \n\t\n\tA program to add r1 and r2 and put the result to r0; \n\t\n\tA program to add r0 and r1 and put the result to r0; \n\n*/ \n\n.global main \n\nmain: \n\tmov r1, #3\n\tmov r2, #4 \n\tadd r0, r1, r2 \n\tbx lr /* link register */\n```\n\nsum02.s \n```asm\n\n/* \n\tRegisters and basic arithmetic \n\t\n\tr0 - r15, 32 bits integer registers in Raspberry PI; \n\t\n\t32 floating point registers; \n\t\n\tA program to add r1 and r2 and put the result to r0; \n\t\n\tA program to add r0 and r1 and put the result to r0; \n\n*/ \n\n.global main \n\nmain: \n\tmov r0, #4\n\tmov r1, #5\n\tadd r0, r0, r1\n\tbx lr /* link register */\n```\n\n## 03 - Memory, addresses. Load and store.\n\nload01.s \n```asm \n/*\n\tMemory, addresses. Load and store.\n\t\n\tDifference between x86 and ARM(Advanced RISC Machines)  \n\t\n\tldr: load to register \n\tstr: store from register \n\t\n\tAddress, Labels \n\t\n\tCode, Data \n\t\n\t.balign byte align \n\t.word \n\t\n\tSections: .text, .data \n\t\n\tload01.s & store01.s \n*/\n\n.data \n\n.balign 4 \nvar1: \n\t.word 3 \n\t\n.balign 4 \t\nvar2:\n\t.word 6 \n\n.text \n.balign 4 \n.global main \nmain: \n\tldr r1, addr_var1\n\tldr r1,[r1]\n\t\n\tldr r2, addr_var2\n\tldr r2,[r2]\n\t\n\tadd r0,r1,r2 \n\tbx lr \n\t\n\t\naddr_var1: \n\t.word var1 \naddr_var2: \n\t.word var2 \t\n\n```\n\nstore01.s \n```asm \n/*\n\tMemory, addresses. Load and store.\n\t\n\tDifference between x86 and ARM(Advanced RISC Machines)  \n\t\n\tldr: load to register \n\tstr: store from register \n\t\n\tAddress, Labels \n\t\n\tCode, Data \n\t\n\t.balign byte align \n\t.word \n\t\n\tSections: .text, .data \n\t\n\tload01.s & store01.s \n*/\n\n.data \n\n.balign 4 \nvar1: \n\t.word 0 \n\t\n.balign 4 \t\nvar2:\n\t.word 0  \n\n.text \n.balign 4 \n.global main \nmain: \n\tmov r3, #6\n\t\n\tldr r1, addr_var1\n\tstr r3, [r1]\n\t\n\tmov r3, #9\n\t\n\tldr r1, addr_var2\n\tstr r3, [r1]\n\n\tldr r1, addr_var1\n\tldr r1,[r1]\n\t\n\tldr r2, addr_var2\n\tldr r2,[r2]\n\t\n\tadd r0,r1,r2 \n\tbx lr \n\t\n\t\naddr_var1: \n\t.word var1 \naddr_var2: \n\t.word var2 \t\n\n```\n\n## 04 - GDB \n\n```bash \n# get help \nhelp \n\n# get help of a command \nhelp disassemble \n\nhelp breakpoints \n\nstart\n\nstepi \n\ninfo registers \n\n# continue to run to the next breakpoint or the end \ncontinue \n\n# print the addr of a \nprint &a \n\n# print the value of a with casting \nprint (int)a \n\n# examine 10 decimal values starting from the address &a \nx/10d &a\n\ndisassemble \n\n# disassemble instructions from 0x000103d0 to the addr with offset +40 bytes \ndisassemble 0x000103d0,+40 \n\n# set breakpoints at the address \nbreak *0x000103f0\n\n# query the current breakpoints \ni b \n\n# delete the 3rd breakpoint \ndelete 3 \n```\n\n## 05 - Branches \n\nbranch01.s \n\n```asm \n/*\nr0 - r15 \nr13: sp, stack pointer  \nr14: link register \nr15: pc, program counter, IP, instruction pointer \nb: branch \ncmp: compare \ncpsr: current progrm status register \nN (negative), Z (zero), C (carry) and V (overflow)\n*/\n\n.text \n.global main \nmain: \n\tmov r0, #2\n\tb end \n\tmov r0, #3 \nend:\n\tbx lr \n\n```\n\ncompare00.s \n\n```asm \n/*\ndemonstrate how subtract operation affects the Carry bit of cpsr \n*/\n.text \n.global main \nmain: \n\tmov r1, #2 \n\tmov r2, #1 \n\tcmp r1, r2 \n\tmov r0, #0 \n\tbx lr \n```\n\ncompare01.s \n\n```asm\n/*\n*/\n.text \n.global main \nmain: \n\tmov r1, #3 \n\tmov r2, #2 \n\tcmp r1, r2 \n\tbeq case_eq\ncase_neq: \n\tmov r0, #6  \n\tb end \ncase_eq: \n\tmov r0, #5\nend: \n\tbx lr \n\n```\n\ncpsr_decode.py \n\n```Python \ncpsr = 0x20000010\n#cpsr is an integer \ndef cpsr_decode(cpsr):\n    bit_names = {} \n    bit_names[\"n_bit\"] = 0x80_00_00_00 #negative\n    bit_names[\"z_bit\"] = 0x40_00_00_00 #zero \n    bit_names[\"c_bit\"] = 0x20_00_00_00 #carry \n    bit_names[\"v_bit\"] = 0x10_00_00_00 #overflow\n    \n    for name,bit in bit_names.items():\n        if cpsr & bit != 0:\n            print(name,\"is set\")\n        else:\n            print(name,\"is not set\")\n\ncpsr_decode(cpsr) \n```\n\n## 06 - Control structures\n\nif01.s\n\n```asm \n.text \n.global main \n/* check if the number in r1 is odd or even*/\nmain:\n    mov r1, #2022\n\nif:\n    tst r1, #1 /* cpsr: current program status register*/\n    bne else\nthen: /* r1 is even */\n    mov r0, #2\n    b end_if \nelse: /* r1 is odd */ \n    mov r0, #1\nend_if:\n    bx lr \n\n```\n\nloop01.s\n\n```asm\n.text \n.global main\n/* calculate the sum 1..22 */ \nmain: \n    mov r1, #0 /* store sum */ \n    mov r2, #1 /* counter */ \nloop: \n    cmp r2, #22 /* cpsr updated */ \n    bgt end_loop \n    add r1, r1, r2 \n    add r2, r2, #1 \n    b loop \nend_loop:\n    mov r0, r1 \n    bx lr \n\n``` \n\n## 07 - Indexing modes\n\nshift01.s\n\n```asm\n/*\nARM assembler in Raspberry Pi\n\n07 Indexing modes: \nAllowed operands in instructions are collectively called indexing modes \n\n\nshifted operand \n\noperator/operand \n\nldr, str, bxx \n\nmov\n\nadd, sub, rsb, cmp, and, tst\n\nregister/immediate values \n\nSyntax of most of the ARM instructions:\ninstruction Rdest, Rsource1, source2\n\nsource2 is either a register or an immediate value\n\nWhen source2 is a register, we can combine it with a shift operation. \n\nLSL #n\nLSL Rsource3 \n\nLSR #n\nLSR Rsource3 \n\nASR #n\nASR Rsource3 \n\nROR #n \nROR Rsource3 \n\n#n can be 1..31. shift is an operation instead of an instruction. shift operation can be used to perform multiplication and division. \n*/\n\n.text \n.global main \nmain: \n    mov r0,#2\n    /*add r0, r0, r0, lsl #1*/\n    mov r0,r0,lsl #2\n    bx lr \n```\n\n## 08-数组和结构体\n\n以下内容为学习<https://thinkingeek.com/2013/01/27/arm-assembler-raspberry-pi-chapter-8/>的摘录.\n\n### 索引模式的定义\n\nThese sets of allowed operands in instructions are collectively called indexing modes.\n\n### 什么是数组\n\nAn array is a sequence of items of the same kind in memory. \n\n```C\nint a[100];\n```\n\n### 什么是结构体 \nA structure (or record or tuple) is a sequence of items of possibly diferent kind.\n\n```C \nstruct my_struct\n{\n  char f0;\n  int f1;\n} b;\n```\n\n### Naive approach without indexing modes  \n\narray01.s, a program to set initial values 0..9 to a 10 elements array\n\n```asm \n.data \n.balign 4 \na: .skip 40 \n\n.text \n.global main \nmain: \n    ldr r0, addr_a \n\n    mov r1, #0 \n\nloop: \n    cmp r1, #10 \n    beq loop_end \n    add r2, r0, r1, lsl #2  \n    str r1, [r2] \n    add r1, r1, #1 \n    b loop \nloop_end: \n    bx lr \naddr_a: .word a \n``` \n\n### Indexing modes \n\n#### Non updating indexing modes \n1. immediate value. The immediate cannot be larger than 12 bits(0..4096)\n```asm \n[Rsource1, #+immediate] \n[Rsource1, #-immediate]\n\nmov r2, #3\nstr r2, [r1, #+12] \n```\n\n2. register \n```asm \n[Rsource1, +Rsource2] \n[Rsource1, -Rsource2]\n\nmov r2, #3         /* r2 ← 3 */\nmov r3, #12        /* r3 ← 12 */\nstr r2, [r1,+r3]   /* *(r1 + r3) ← r2 */\n```\n\n3. register with shift operation \n```asm \n[Rsource1, +Rsource2, shift_operation #immediate]\n[Rsource1, -Rsource2, shift_operation #immediate]\n\nstr r2, [r1, +r2, LSL #2]\n```\n\n#### Updating indexing modes \nIn these indexing modes the Rsource1 register is updated with the address synthesized by the load or store instruction. \n\n##### Post-indexing modes \n\n4. The value of Rsource1 is used as the address for the load or store. Then Rsource1 is updated with the value of immediate after adding (or subtracting) it to Rsource1.\n\n```asm \n[Rsource1], #+immediate\n[Rsource1], #-immediate\n\nstr r2, [r1], #4        /* *r1 ← r2 then r1 ← r1 + 4 */\n```\n\n5. register\n\n```asm \n[Rsource1], +Rsource2\n[Rsource1], -Rsource2\n\n```\n\n6. register with shift operation \n\n```asm \n[Rsource1], +Rsource2, shift_operation #immediate \n[Rsource1], -Rsource2, shift_operation #immediate\n```\n\n##### Pre-indexing modes \n\n7. immediate \n\n```asm \n[Rsource1, #+immediate]! \n[Rsource1, #-immediate]!\n\nldr r2, [r1, #+12]!  /* r1 ← r1 + 12 then r2 ← *r1 */\n```\n\n8. register \n\n```asm \n[Rsource1, +Rsource2]! \n[Rsource1, +Rsource2]!\n```\n\n9. register with shift operation \n```asm \n[Rsource1, +Rsource2, shift_operation #immediate]! \n[Rsource1, -Rsource2, shift_operation #immediate]!\n```\n\n###  approach using indexing modes  \n\narray02.s, a program to set initial values 0..9 to a 10 elements array, using indexing modes \n\n```asm \n.data \n.balign 4 \na: .skip 40 \n\n.text \n.global main \nmain: \n    ldr r0, addr_a \n\n    mov r1, #0 \n\nloop: \n    cmp r1, #10 \n    beq loop_end \n    /*add r2, r0, r1, lsl #2 */\n    str r1, [r0, r1, lsl #2] \n    add r1, r1, #1 \n    b loop \nloop_end: \n    bx lr \naddr_a: .word a \n\n```\n### 结构体\n略\n\n## 09-函数\n\n以下内容为学习<https://thinkingeek.com/2013/02/02/arm-assembler-raspberry-pi-chapter-9/>的摘录.\n\nFunctions are a way to reuse code.\n\nAAPCS:Procedure Call Standard for ARM Architecture\n\n| Register | Register Alias | Description                     | Remark |\n|----------|----------------|---------------------------------|--------|\n| r15      | pc             | Program Counter                 |        |\n| r14      | lr             | Link Register                   |        |\n| r13      | sp             | Stack Pointer                   |        |\n|          | cpsr           | Current Program Status Register |        |\n\nFunctions can receive parameters. The first 4 parameters must be stored, sequentially, in the registers `r0`, `r1`, `r2` and `r3`.\n\n### Well behaved functions\n\nA function must adhere, at least, to the following rules if we want it to be AAPCS compliant.\n\n-   A function should not make any assumption on the contents of the `cpsr`. So, at the entry of a function condition codes N, Z, C and V are unknown.\n\n-   A function can freely modify registers `r0`, `r1`, `r2` and `r3`.\n\n-   A function cannot assume anything on the contents of `r0`, `r1`, `r2` and `r3` unless they are playing the role of a parameter.\n\n-   A function can freely modify `lr` but the value upon entering the function will be needed when leaving the function (so such value must be kept somewhere).\n\n-   A function can modify all the remaining registers as long as their values are restored upon leaving the function. This includes `sp` and registers `r4` to `r11`.\n\n-   This means that, after calling a function, we have to assume that (only) registers `r0`, `r1`, `r2`, `r3` and `lr` have been overwritten.\n\n### Calling a function\n\ndirect call:\n\n```         \nbl label\n```\n\nindirect call(first storing the address of the function into a register):\n\n```         \nblx Rsource1 /* Rsource1 means register operand1 */\n```\n\nIn both cases the behaviour is as follows: the address of the function (immediately encoded in the bl or using the value of the register in blx) is stored in pc. The address of the instruction following the bl or blx instruction is kept in lr.\n\n### Leaving a function\n\nA well behaved function, as stated above, will have to keep the initial value of lr somewhere. When leaving the function, we will retrieve that value and put it in some register (it can be lr again but this is not mandatory). Then we will bx Rsource1 (we could use blx as well but the latter would update lr which is useless here).\n\n### Returning data from functions\n\nFunctions must use r0 for data that fits in 32 bit (or less). This is, C types char, short, int, long (and float though we have not seen floating point yet) will be returned in r0. For basic types of 64 bit, like C types long long and double, they will be returned in r1 and r0. Any other data is returned through the stack unless it is 32 bit or less, where it will be returned in r0.\n\n### Hello world (puts)\n\n```asm\n/* -- hello01.s */\n.data\n\ngreeting:\n .asciz \"Hello world\"\n\n.balign 4\nreturn: .word 0\n\n.text\n\n.global main\nmain:\n    ldr r1, address_of_return     /*   r1 ← &address_of_return */\n    str lr, [r1]                  /*   *r1 ← lr */\n\n    ldr r0, address_of_greeting   /* r0 ← &address_of_greeting */\n                                  /* First parameter of puts */\n\n    bl puts                       /* Call to puts */\n                                  /* lr ← address of next instruction */\n\n    ldr r1, address_of_return     /* r1 ← &address_of_return */\n    ldr lr, [r1]                  /* lr ← *r1 */\n    bx lr                         /* return from main */\naddress_of_greeting: .word greeting\naddress_of_return: .word return\n\n/* External */\n.global puts\n```\n\n### Interaction (scanf, printf)\n\n```asm\n/* -- printf01.s */\n.data\n\n/* First message */\n.balign 4\nmessage1: .asciz \"Hey, type a number: \"\n\n/* Second message */\n.balign 4\nmessage2: .asciz \"I read the number %d\\n\"\n\n/* Format pattern for scanf */\n.balign 4\nscan_pattern : .asciz \"%d\"\n\n/* Where scanf will store the number read */\n.balign 4\nnumber_read: .word 0\n\n.balign 4\nreturn: .word 0\n\n.text\n\n.global main\nmain:\n    ldr r1, address_of_return        /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    ldr r0, address_of_message1      /* r0 ← &message1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    bl scanf                         /* call to scanf */\n\n    ldr r0, address_of_message2      /* r0 ← &message2 */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    ldr r1, [r1]                     /* r1 ← *r1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_number_read   /* r0 ← &number_read */\n    ldr r0, [r0]                     /* r0 ← *r0 */\n\n    ldr lr, address_of_return        /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_message1 : .word message1\naddress_of_message2 : .word message2\naddress_of_scan_pattern : .word scan_pattern\naddress_of_number_read : .word number_read\naddress_of_return : .word return\n\n/* External */\n.global printf\n.global scanf\n```\n\n### First function (multiply by 5) \n\n```asm\n/* -- printf02.s */\n.data\n\n/* First message */\n.balign 4\nmessage1: .asciz \"Hey, type a number: \"\n\n/* Second message */\n.balign 4\nmessage2: .asciz \"%d times 5 is %d\\n\"\n\n/* Format pattern for scanf */\n.balign 4\nscan_pattern : .asciz \"%d\"\n\n/* Where scanf will store the number read */\n.balign 4\nnumber_read: .word 0\n\n.balign 4\nreturn: .word 0\n\n.balign 4\nreturn2: .word 0\n\n.text\n\n/*\nmult_by_5 function\n*/\nmult_by_5: \n    ldr r1, address_of_return2       /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    add r0, r0, r0, LSL #2           /* r0 ← r0 + 4*r0 */\n\n    ldr lr, address_of_return2       /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_return2 : .word return2\n\n.global main\nmain:\n    ldr r1, address_of_return        /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    ldr r0, address_of_message1      /* r0 ← &message1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    bl scanf                         /* call to scanf */\n\n    ldr r0, address_of_number_read   /* r0 ← &number_read */\n    ldr r0, [r0]                     /* r0 ← *r0 */\n    bl mult_by_5\n\n    mov r2, r0                       /* r2 ← r0 */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    ldr r1, [r1]                     /* r1 ← *r1 */\n    ldr r0, address_of_message2      /* r0 ← &message2 */\n    bl printf                        /* call to printf */\n\n    ldr lr, address_of_return        /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_message1 : .word message1\naddress_of_message2 : .word message2\naddress_of_scan_pattern : .word scan_pattern\naddress_of_number_read : .word number_read\naddress_of_return : .word return\n\n/* External */\n.global printf\n.global scanf\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}