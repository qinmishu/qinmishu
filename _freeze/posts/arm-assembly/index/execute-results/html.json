{
  "hash": "e6cee5fa71d58d5c2157fa68d0deef5e",
  "result": {
    "markdown": "---\ntitle: ARM汇编语言编程\nauthor: 秦米书\ndate: '2023-04-06'\ncategories:\n  - arm\n  - assembly\n  - raspberry-pi\nimage: image.jpg\nformat:\n  html:\n    toc: true\n    toc-depth: 7\neditor: visual\ncode-line-numbers: true\n---\n\nThis is a note while studing [ARM assembler in Raspberry Pi](https://thinkingeek.com/arm-assembler-raspberry-pi/). Most contents are copied from there to remember where I read to. You should read the original copy from the author. \n\n## Reference \n\n[ARM assembler in Raspberry Pi](https://thinkingeek.com/arm-assembler-raspberry-pi/)\n\n## 01 - first arm assembly program \n\nfirst.s\n```asm\n.global main \n\nmain: \n\tmov r0, #3 /* r0 is a register, #3 is an immediate value */\n\tbx lr /*branch and exchange, link register*/\n```\n\n## 02 - Registers and basic arithmetic \n\nsum01.s \n```asm\n/* \n\tRegisters and basic arithmetic \n\t\n\tr0 - r15, 32 bits integer registers in Raspberry PI; \n\t\n\t32 floating point registers; \n\t\n\tA program to add r1 and r2 and put the result to r0; \n\t\n\tA program to add r0 and r1 and put the result to r0; \n\n*/ \n\n.global main \n\nmain: \n\tmov r1, #3\n\tmov r2, #4 \n\tadd r0, r1, r2 \n\tbx lr /* link register */\n```\n\nsum02.s \n```asm\n\n/* \n\tRegisters and basic arithmetic \n\t\n\tr0 - r15, 32 bits integer registers in Raspberry PI; \n\t\n\t32 floating point registers; \n\t\n\tA program to add r1 and r2 and put the result to r0; \n\t\n\tA program to add r0 and r1 and put the result to r0; \n\n*/ \n\n.global main \n\nmain: \n\tmov r0, #4\n\tmov r1, #5\n\tadd r0, r0, r1\n\tbx lr /* link register */\n```\n\n## 03 - Memory, addresses. Load and store.\n\nload01.s \n```asm \n/*\n\tMemory, addresses. Load and store.\n\t\n\tDifference between x86 and ARM(Advanced RISC Machines)  \n\t\n\tldr: load to register \n\tstr: store from register \n\t\n\tAddress, Labels \n\t\n\tCode, Data \n\t\n\t.balign byte align \n\t.word \n\t\n\tSections: .text, .data \n\t\n\tload01.s & store01.s \n*/\n\n.data \n\n.balign 4 \nvar1: \n\t.word 3 \n\t\n.balign 4 \t\nvar2:\n\t.word 6 \n\n.text \n.balign 4 \n.global main \nmain: \n\tldr r1, addr_var1\n\tldr r1,[r1]\n\t\n\tldr r2, addr_var2\n\tldr r2,[r2]\n\t\n\tadd r0,r1,r2 \n\tbx lr \n\t\n\t\naddr_var1: \n\t.word var1 \naddr_var2: \n\t.word var2 \t\n\n```\n\nstore01.s \n```asm \n/*\n\tMemory, addresses. Load and store.\n\t\n\tDifference between x86 and ARM(Advanced RISC Machines)  \n\t\n\tldr: load to register \n\tstr: store from register \n\t\n\tAddress, Labels \n\t\n\tCode, Data \n\t\n\t.balign byte align \n\t.word \n\t\n\tSections: .text, .data \n\t\n\tload01.s & store01.s \n*/\n\n.data \n\n.balign 4 \nvar1: \n\t.word 0 \n\t\n.balign 4 \t\nvar2:\n\t.word 0  \n\n.text \n.balign 4 \n.global main \nmain: \n\tmov r3, #6\n\t\n\tldr r1, addr_var1\n\tstr r3, [r1]\n\t\n\tmov r3, #9\n\t\n\tldr r1, addr_var2\n\tstr r3, [r1]\n\n\tldr r1, addr_var1\n\tldr r1,[r1]\n\t\n\tldr r2, addr_var2\n\tldr r2,[r2]\n\t\n\tadd r0,r1,r2 \n\tbx lr \n\t\n\t\naddr_var1: \n\t.word var1 \naddr_var2: \n\t.word var2 \t\n\n```\n\n## 04 - GDB \n\n```bash \n# get help \nhelp \n\n# get help of a command \nhelp disassemble \n\nhelp breakpoints \n\nstart\n\nstepi \n\ninfo registers \n\n# continue to run to the next breakpoint or the end \ncontinue \n\n# print the addr of a \nprint &a \n\n# print the value of a with casting \nprint (int)a \n\n# examine 10 decimal values starting from the address &a \nx/10d &a\n\ndisassemble \n\n# disassemble instructions from 0x000103d0 to the addr with offset +40 bytes \ndisassemble 0x000103d0,+40 \n\n# set breakpoints at the address \nbreak *0x000103f0\n\n# query the current breakpoints \ni b \n\n# delete the 3rd breakpoint \ndelete 3 \n```\n\n## 05 - Branches \n\nbranch01.s \n\n```asm \n/*\nr0 - r15 \nr13: sp, stack pointer  \nr14: link register \nr15: pc, program counter, IP, instruction pointer \nb: branch \ncmp: compare \ncpsr: current progrm status register \nN (negative), Z (zero), C (carry) and V (overflow)\n*/\n\n.text \n.global main \nmain: \n\tmov r0, #2\n\tb end \n\tmov r0, #3 \nend:\n\tbx lr \n\n```\n\ncompare00.s \n\n```asm \n/*\ndemonstrate how subtract operation affects the Carry bit of cpsr \n*/\n.text \n.global main \nmain: \n\tmov r1, #2 \n\tmov r2, #1 \n\tcmp r1, r2 \n\tmov r0, #0 \n\tbx lr \n```\n\ncompare01.s \n\n```asm\n/*\n*/\n.text \n.global main \nmain: \n\tmov r1, #3 \n\tmov r2, #2 \n\tcmp r1, r2 \n\tbeq case_eq\ncase_neq: \n\tmov r0, #6  \n\tb end \ncase_eq: \n\tmov r0, #5\nend: \n\tbx lr \n\n```\n\ncpsr_decode.py \n\n```Python \ncpsr = 0x20000010\n#cpsr is an integer \ndef cpsr_decode(cpsr):\n    bit_names = {} \n    bit_names[\"n_bit\"] = 0x80_00_00_00 #negative\n    bit_names[\"z_bit\"] = 0x40_00_00_00 #zero \n    bit_names[\"c_bit\"] = 0x20_00_00_00 #carry \n    bit_names[\"v_bit\"] = 0x10_00_00_00 #overflow\n    \n    for name,bit in bit_names.items():\n        if cpsr & bit != 0:\n            print(name,\"is set\")\n        else:\n            print(name,\"is not set\")\n\ncpsr_decode(cpsr) \n```\n\n## 06 - Control structures\n\nif01.s\n\n```asm \n.text \n.global main \n/* check if the number in r1 is odd or even*/\nmain:\n    mov r1, #2022\n\nif:\n    tst r1, #1 /* cpsr: current program status register*/\n    bne else\nthen: /* r1 is even */\n    mov r0, #2\n    b end_if \nelse: /* r1 is odd */ \n    mov r0, #1\nend_if:\n    bx lr \n\n```\n\nloop01.s\n\n```asm\n.text \n.global main\n/* calculate the sum 1..22 */ \nmain: \n    mov r1, #0 /* store sum */ \n    mov r2, #1 /* counter */ \nloop: \n    cmp r2, #22 /* cpsr updated */ \n    bgt end_loop \n    add r1, r1, r2 \n    add r2, r2, #1 \n    b loop \nend_loop:\n    mov r0, r1 \n    bx lr \n\n``` \n\n## 07 - Indexing modes\n\nshift01.s\n\n```asm\n/*\nARM assembler in Raspberry Pi\n\n07 Indexing modes: \nAllowed operands in instructions are collectively called indexing modes \n\n\nshifted operand \n\noperator/operand \n\nldr, str, bxx \n\nmov\n\nadd, sub, rsb, cmp, and, tst\n\nregister/immediate values \n\nSyntax of most of the ARM instructions:\ninstruction Rdest, Rsource1, source2\n\nsource2 is either a register or an immediate value\n\nWhen source2 is a register, we can combine it with a shift operation. \n\nLSL #n\nLSL Rsource3 \n\nLSR #n\nLSR Rsource3 \n\nASR #n\nASR Rsource3 \n\nROR #n \nROR Rsource3 \n\n#n can be 1..31. shift is an operation instead of an instruction. shift operation can be used to perform multiplication and division. \n*/\n\n.text \n.global main \nmain: \n    mov r0,#2\n    /*add r0, r0, r0, lsl #1*/\n    mov r0,r0,lsl #2\n    bx lr \n```\n\n## 08-数组和结构体\n\n以下内容为学习<https://thinkingeek.com/2013/01/27/arm-assembler-raspberry-pi-chapter-8/>的摘录.\n\n### 索引模式的定义\n\nThese sets of allowed operands in instructions are collectively called indexing modes.\n\n### 什么是数组\n\nAn array is a sequence of items of the same kind in memory. \n\n```C\nint a[100];\n```\n\n### 什么是结构体 \nA structure (or record or tuple) is a sequence of items of possibly diferent kind.\n\n```C \nstruct my_struct\n{\n  char f0;\n  int f1;\n} b;\n```\n\n### Naive approach without indexing modes  \n\narray01.s, a program to set initial values 0..9 to a 10 elements array\n\n```asm \n.data \n.balign 4 \na: .skip 40 \n\n.text \n.global main \nmain: \n    ldr r0, addr_a \n\n    mov r1, #0 \n\nloop: \n    cmp r1, #10 \n    beq loop_end \n    add r2, r0, r1, lsl #2  \n    str r1, [r2] \n    add r1, r1, #1 \n    b loop \nloop_end: \n    bx lr \naddr_a: .word a \n``` \n\n### Indexing modes \n\n#### Non updating indexing modes \n1. immediate value. The immediate cannot be larger than 12 bits(0..4096)\n```asm \n[Rsource1, #+immediate] \n[Rsource1, #-immediate]\n\nmov r2, #3\nstr r2, [r1, #+12] \n```\n\n2. register \n```asm \n[Rsource1, +Rsource2] \n[Rsource1, -Rsource2]\n\nmov r2, #3         /* r2 ← 3 */\nmov r3, #12        /* r3 ← 12 */\nstr r2, [r1,+r3]   /* *(r1 + r3) ← r2 */\n```\n\n3. register with shift operation \n```asm \n[Rsource1, +Rsource2, shift_operation #immediate]\n[Rsource1, -Rsource2, shift_operation #immediate]\n\nstr r2, [r1, +r2, LSL #2]\n```\n\n#### Updating indexing modes \nIn these indexing modes the Rsource1 register is updated with the address synthesized by the load or store instruction. \n\n##### Post-indexing modes \n\n4. The value of Rsource1 is used as the address for the load or store. Then Rsource1 is updated with the value of immediate after adding (or subtracting) it to Rsource1.\n\n```asm \n[Rsource1], #+immediate\n[Rsource1], #-immediate\n\nstr r2, [r1], #4        /* *r1 ← r2 then r1 ← r1 + 4 */\n```\n\n5. register\n\n```asm \n[Rsource1], +Rsource2\n[Rsource1], -Rsource2\n\n```\n\n6. register with shift operation \n\n```asm \n[Rsource1], +Rsource2, shift_operation #immediate \n[Rsource1], -Rsource2, shift_operation #immediate\n```\n\n##### Pre-indexing modes \n\n7. immediate \n\n```asm \n[Rsource1, #+immediate]! \n[Rsource1, #-immediate]!\n\nldr r2, [r1, #+12]!  /* r1 ← r1 + 12 then r2 ← *r1 */\n```\n\n8. register \n\n```asm \n[Rsource1, +Rsource2]! \n[Rsource1, +Rsource2]!\n```\n\n9. register with shift operation \n```asm \n[Rsource1, +Rsource2, shift_operation #immediate]! \n[Rsource1, -Rsource2, shift_operation #immediate]!\n```\n\n###  approach using indexing modes  \n\narray02.s, a program to set initial values 0..9 to a 10 elements array, using indexing modes \n\n```asm \n.data \n.balign 4 \na: .skip 40 \n\n.text \n.global main \nmain: \n    ldr r0, addr_a \n\n    mov r1, #0 \n\nloop: \n    cmp r1, #10 \n    beq loop_end \n    /*add r2, r0, r1, lsl #2 */\n    str r1, [r0, r1, lsl #2] \n    add r1, r1, #1 \n    b loop \nloop_end: \n    bx lr \naddr_a: .word a \n\n```\n### 结构体\n略\n\n## 09-函数\n\n以下内容为学习<https://thinkingeek.com/2013/02/02/arm-assembler-raspberry-pi-chapter-9/>的摘录.\n\nFunctions are a way to reuse code.\n\nAAPCS:Procedure Call Standard for ARM Architecture\n\n| Register | Register Alias | Description                     | Remark |\n|----------|----------------|---------------------------------|--------|\n| r15      | pc             | Program Counter                 |        |\n| r14      | lr             | Link Register                   |        |\n| r13      | sp             | Stack Pointer                   |        |\n|          | cpsr           | Current Program Status Register |        |\n\nFunctions can receive parameters. The first 4 parameters must be stored, sequentially, in the registers `r0`, `r1`, `r2` and `r3`.\n\n### Well behaved functions\n\nA function must adhere, at least, to the following rules if we want it to be AAPCS compliant.\n\n-   A function should not make any assumption on the contents of the `cpsr`. So, at the entry of a function condition codes N, Z, C and V are unknown.\n\n-   A function can freely modify registers `r0`, `r1`, `r2` and `r3`.\n\n-   A function cannot assume anything on the contents of `r0`, `r1`, `r2` and `r3` unless they are playing the role of a parameter.\n\n-   A function can freely modify `lr` but the value upon entering the function will be needed when leaving the function (so such value must be kept somewhere).\n\n-   A function can modify all the remaining registers as long as their values are restored upon leaving the function. This includes `sp` and registers `r4` to `r11`.\n\n-   This means that, after calling a function, we have to assume that (only) registers `r0`, `r1`, `r2`, `r3` and `lr` have been overwritten.\n\n### Calling a function\n\ndirect call:\n\n```         \nbl label\n```\n\nindirect call(first storing the address of the function into a register):\n\n```         \nblx Rsource1 /* Rsource1 means register operand1 */\n```\n\nIn both cases the behaviour is as follows: the address of the function (immediately encoded in the bl or using the value of the register in blx) is stored in pc. The address of the instruction following the bl or blx instruction is kept in lr.\n\n### Leaving a function\n\nA well behaved function, as stated above, will have to keep the initial value of lr somewhere. When leaving the function, we will retrieve that value and put it in some register (it can be lr again but this is not mandatory). Then we will bx Rsource1 (we could use blx as well but the latter would update lr which is useless here).\n\n### Returning data from functions\n\nFunctions must use r0 for data that fits in 32 bit (or less). This is, C types char, short, int, long (and float though we have not seen floating point yet) will be returned in r0. For basic types of 64 bit, like C types long long and double, they will be returned in r1 and r0. Any other data is returned through the stack unless it is 32 bit or less, where it will be returned in r0.\n\n### Hello world (puts)\n\n```asm\n/* -- hello01.s */\n.data\n\ngreeting:\n .asciz \"Hello world\"\n\n.balign 4\nreturn: .word 0\n\n.text\n\n.global main\nmain:\n    ldr r1, address_of_return     /*   r1 ← &address_of_return */\n    str lr, [r1]                  /*   *r1 ← lr */\n\n    ldr r0, address_of_greeting   /* r0 ← &address_of_greeting */\n                                  /* First parameter of puts */\n\n    bl puts                       /* Call to puts */\n                                  /* lr ← address of next instruction */\n\n    ldr r1, address_of_return     /* r1 ← &address_of_return */\n    ldr lr, [r1]                  /* lr ← *r1 */\n    bx lr                         /* return from main */\naddress_of_greeting: .word greeting\naddress_of_return: .word return\n\n/* External */\n.global puts\n```\n\n### Interaction (scanf, printf)\n\n```asm\n/* -- printf01.s */\n.data\n\n/* First message */\n.balign 4\nmessage1: .asciz \"Hey, type a number: \"\n\n/* Second message */\n.balign 4\nmessage2: .asciz \"I read the number %d\\n\"\n\n/* Format pattern for scanf */\n.balign 4\nscan_pattern : .asciz \"%d\"\n\n/* Where scanf will store the number read */\n.balign 4\nnumber_read: .word 0\n\n.balign 4\nreturn: .word 0\n\n.text\n\n.global main\nmain:\n    ldr r1, address_of_return        /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    ldr r0, address_of_message1      /* r0 ← &message1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    bl scanf                         /* call to scanf */\n\n    ldr r0, address_of_message2      /* r0 ← &message2 */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    ldr r1, [r1]                     /* r1 ← *r1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_number_read   /* r0 ← &number_read */\n    ldr r0, [r0]                     /* r0 ← *r0 */\n\n    ldr lr, address_of_return        /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_message1 : .word message1\naddress_of_message2 : .word message2\naddress_of_scan_pattern : .word scan_pattern\naddress_of_number_read : .word number_read\naddress_of_return : .word return\n\n/* External */\n.global printf\n.global scanf\n```\n\n### First function (multiply by 5) \n\n```asm\n/* -- printf02.s */\n.data\n\n/* First message */\n.balign 4\nmessage1: .asciz \"Hey, type a number: \"\n\n/* Second message */\n.balign 4\nmessage2: .asciz \"%d times 5 is %d\\n\"\n\n/* Format pattern for scanf */\n.balign 4\nscan_pattern : .asciz \"%d\"\n\n/* Where scanf will store the number read */\n.balign 4\nnumber_read: .word 0\n\n.balign 4\nreturn: .word 0\n\n.balign 4\nreturn2: .word 0\n\n.text\n\n/*\nmult_by_5 function\n*/\nmult_by_5: \n    ldr r1, address_of_return2       /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    add r0, r0, r0, LSL #2           /* r0 ← r0 + 4*r0 */\n\n    ldr lr, address_of_return2       /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_return2 : .word return2\n\n.global main\nmain:\n    ldr r1, address_of_return        /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    ldr r0, address_of_message1      /* r0 ← &message1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    bl scanf                         /* call to scanf */\n\n    ldr r0, address_of_number_read   /* r0 ← &number_read */\n    ldr r0, [r0]                     /* r0 ← *r0 */\n    bl mult_by_5\n\n    mov r2, r0                       /* r2 ← r0 */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    ldr r1, [r1]                     /* r1 ← *r1 */\n    ldr r0, address_of_message2      /* r0 ← &message2 */\n    bl printf                        /* call to printf */\n\n    ldr lr, address_of_return        /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_message1 : .word message1\naddress_of_message2 : .word message2\naddress_of_scan_pattern : .word scan_pattern\naddress_of_number_read : .word number_read\naddress_of_return : .word return\n\n/* External */\n.global printf\n.global scanf\n```\n\n## 10 Functions. The stack \n\n```asm \n// stm -- store multiple, i -- increase, a -- after, d -- decrease, b -- before \nstmia, stmib, stmda, stmdb, ldmia, ldmib, ldmda, ldmdb \n\n// push is equivalent to stmdb, pop is equivalent to ldmia when operating on sp \npush, pop\n\n// multiplication instruction \nmul Rdest, Rsource1, Rsource2.\n```\n\n### Dynamic activation \nOne of the benefits of functions is being able to call them more than once. A function may call itself. \n\nA function is dynamically activated each time it is called. The span of a dynamic activation goes from the point where the function is called until it returns. At a given time, more than one function is dynamically activated. The whole dynamic activation set of functions includes the current function and the dynamic activation set of the function that called it (the current function).\n\n```C\n//Example recursive function that calls itself \nint factorial(int n)\n{\n   if (n == 0)\n      return 1;\n   else\n      return n * factorial(n-1);\n}\n```\n\nWell behaved functions(Refer to Chap9), a brief recall: \n\n- Only r0, r1, r2 and r3 can be freely modified.\n- lr(r14) value at the entry of the function must be kept somewhere because we will need it to leave the function (to return to the caller).\n- All other registers r4 to r11 and sp(r13) can be modified but they must be restored to their original values upon leaving the function.\n\nNote: pc register is r15. TBD: What's the function of r12 function? Why is it not mentioned here? \n\nwe need some way to keep at least the value of lr per each dynamic activation. And not only lr, if we wanted to use registers from r4 to r11 we also need to keep somehow per each dynamic activation, a global variable would not be enough either. This is where the stack comes into play.\n\n### The stack \n\nIn computing, a stack is a data structure (a way to organize data that provides some interesting properties). A stack typically has three operations: access the top of the stack, push onto the top, pop from the top. Dependening on the context you can only access the top of the stack, in our case we will be able to access more elements than just the top. \n\nBut, what is the stack? I already said in chaper 9 that the stack is a region of memory owned solely by the function. We can now reword this a bit better: the stack is a region of memory owned solely by the current dynamic activation. register sp stands for stack pointer. This register will contain the top of the stack. The region of memory owned by the dynamic activation is the extent of bytes contained between the current value of sp and the initial value that sp had at the beginning of the function. We will call that region the local memory of a function (more precisely, of a dynamic activation of it). We will put there whatever has to be saved at the beginning of a function and restored before leaving. We will also keep there the local variables of a function (dynamic activation).\n\nOur function also has to adhere to some rules when handling the stack. \n\n- The stack pointer (sp) is always 4 byte aligned. This is absolutely mandatory. However, due to the Procedure Call Standard for the ARM architecture (AAPCS), the stack pointer will have to be 8 byte aligned, otherwise funny things may happen when we call what the AAPCS calls as public interfaces (this is, code written by other people). (Note: It means we can persist in 4 byte aligned if the function we are written is only called by ourself, and we won't call functions written by other persons; otherwise, we should persist in 8 byte algined.)  \n- The value of sp when leaving the function should be the same value it had upon entering the function.\n\nIt is a convention how the stack, and thus the local memory, has its size defined. The stack can grow upwards or downwards. If it grows upwards it means that we have to increase the value of the sp register in order to enlarge the local memory. If it grows downwards we have to do the opposite, the value of the sp register must be subtracted as many bytes as the size of the local storage. In Linux ARM, the stack grows downwards, towards zero (although it never should reach zero). Addresses of local variables have very large values in the 32 bit range. They are usually close to $2^{32}$.\n\nAnother convention when using the stack concerns whether the sp register contains the address of the top of the stack or some bytes above. In Linux ARM the sp register directly points to the top of the stack: in the memory addressed by sp there is useful information.\n\nExample snippets of keep `lr` register and restore `lr` register. (Note: We can use add and sub to operate sp, we may also use push and pop or stmxx and ldmxx instructions.)\n```asm \nsub sp, sp, #8  /* sp ← sp - 8. This enlarges the stack by 8 bytes */\nstr lr, [sp]    /* *sp ← lr */\n... // Code of the function\nldr lr, [sp]    /* lr ← *sp */\nadd sp, sp, #8  /* sp ← sp + 8. /* This reduces the stack by 8 bytes\n                                effectively restoring the stack \n                                pointer to its original value */\nbx lr\n```\n\nShortened snippets of keep `lr` and restore `lr`, making use of indexing modes. \n```asm \nstr lr, [sp, #-8]!  /* preindex: sp ← sp - 8; *sp ← lr */\n... // Code of the function\nldr lr, [sp], #+8   /* postindex; lr ← *sp; sp ← sp + 8 */\nbx lr\n```\n\n### First approach to implement the factorial function \n\nIt uses the `mul Rdest, Rsource1, Rsource2` instruction. \n\nThis instruction only computes the lower 32 bits. Because we are not going to use 64 bit values in this example, the maximum factorial we will be able to compute is 12! (13! is bigger than $2^{32}$). \n\nThis approach directly operates on the `sp` register. \n```asm \n/* -- factorial01.s */\n.data\n\nmessage1: .asciz \"Type a number: \"\nformat:   .asciz \"%d\"\nmessage2: .asciz \"The factorial of %d is %d\\n\"\n\n.text\n\nfactorial:\n    str lr, [sp,#-4]!  /* Push lr onto the top of the stack */\n    str r0, [sp,#-4]!  /* Push r0 onto the top of the stack */\n                       /* Note that after that, sp is 8 byte aligned */\n    cmp r0, #0         /* compare r0 and 0 */\n    bne is_nonzero     /* if r0 != 0 then branch */\n    mov r0, #1         /* r0 ← 1. This is the return */\n    b end\nis_nonzero:\n                       /* Prepare the call to factorial(n-1) */\n    sub r0, r0, #1     /* r0 ← r0 - 1 */\n    bl factorial\n                       /* After the call r0 contains factorial(n-1) */\n                       /* Load r0 (that we kept in th stack) into r1 */\n    ldr r1, [sp]       /* r1 ← *sp */\n    mul r0, r0, r1     /* r0 ← r0 * r1 */\n    \nend:\n    add sp, sp, #+4    /* Discard the r0 we kept in the stack */\n    ldr lr, [sp], #+4  /* Pop the top of the stack and put it in lr */\n    bx lr              /* Leave factorial */\n\n.global main\nmain:\n    str lr, [sp,#-4]!            /* Push lr onto the top of the stack */\n    sub sp, sp, #4               /* Make room for one 4 byte integer in the stack */\n                                 /* In these 4 bytes we will keep the number */\n                                 /* entered by the user */\n                                 /* Note that after that the stack is 8-byte aligned */\n    ldr r0, address_of_message1  /* Set &message1 as the first parameter of printf */\n    bl printf                    /* Call printf */\n\n    ldr r0, address_of_format    /* Set &format as the first parameter of scanf */\n    mov r1, sp                   /* Set the top of the stack as the second parameter */\n                                 /* of scanf */\n    bl scanf                     /* Call scanf */\n\n    ldr r0, [sp]                 /* Load the integer read by scanf into r0 */\n                                 /* So we set it as the first parameter of factorial */\n    bl factorial                 /* Call factorial */\n\n    mov r2, r0                   /* Get the result of factorial and move it to r2 */\n                                 /* So we set it as the third parameter of printf */\n    ldr r1, [sp]                 /* Load the integer read by scanf into r1 */\n                                 /* So we set it as the second parameter of printf */\n    ldr r0, address_of_message2  /* Set &message2 as the first parameter of printf */\n    bl printf                    /* Call printf */\n\n\n    add sp, sp, #+4              /* Discard the integer read by scanf */\n    ldr lr, [sp], #+4            /* Pop the top of the stack and put it in lr */\n    bx lr                        /* Leave main */\n\naddress_of_message1: .word message1\naddress_of_message2: .word message2\naddress_of_format: .word format\n```\n\n### Do it better using `ldm` and `stm` \n\nNote that the number of instructions that we need to push and pop data to and from the stack grows linearly with respect to the number of data items. Since ARM was designed for embedded systems, ARM designers devised a way to reduce the number of instructions we need for the «bookkeeping» of the stack. These instructions are load multiple, ldm, and store multiple, stm. \n\nThese two instructions are rather powerful and allow in a single instruction perform a lot of things. Their syntax is shown as follows. Elements enclosed in curly braces { and } may be omitted from the syntax (the effect of the instruction will vary, though).\n\n```asm\nldm addressing-mode Rbase{!}, register-set\nstm addressing-mode Rbase{!}, register-set\n``` \n\nWe will consider addressing-mode later. Rbase is the base address used to load to or store from the register-set. All 16 ARM registers may be specified in register-set (except pc in stm). A set of addresses is generated when executing these instructions. One address per register in the register-set. Then, each register, in ascending order, is paired with each of these addresses, also in ascending order. This way the lowest-numbered register gets the lowest memory address, and the highest-numbered register gets the highest memory address. Each pair register-address is then used to perform the memory operation: load or store. Specifying ! means that Rbase will be updated. The updated value depends on addressing-mode.\n\nNote that, if the registers are paired with addresses depending on their register number, it seems that they will always be loaded and stored in the same way. For instance a register-set containing r4, r5 and r6 will always store r4 in the lowest address generated by the instruction and r6 in the highest one(Note: Since it is a set, the order does not matter. `r4, r5, r6` and `r4, r6, r5` mean the same thing in a set). We can, though, specify what is considered the lowest address or the highest address. So, is Rbase actually the highest address or the lowest address of the multiple load/store? This is one of the two aspects that is controlled by addressing-mode. The second aspect relates to when the address of the memory operation changes between each memory operation.\n\nIf the value in Rbase is to be considered the the highest address it means that we should first decrease Rbase as many bytes as required by the number of registers in the register-set (this is 4 times the number of registers) to form the lowest address. Then we can load or store each register consecutively starting from that lowest address, always in ascending order of the register number. This addressing mode is called decreasing and is specified using a `d`. Conversely, if Rbase is to be considered the lowest address, then this is a bit easier as we can use its value as the lowest address already. We proceed as usual, loading or storing each register in ascending order of their register number. This addressing mode is called increasing and is specified using an `i`.\n\nAt each load or store, the address generated for the memory operation may be updated after or before the memory operation itself. We can specify this using `a` or `b`, respectively.\n\nIf we specify !, after the instruction, Rbase will have the highest address generated in the increasing mode and the lowest address generated in the decreasing mode. The final value of Rbase will include the final addition or subtraction if we use a mode that updates after (an a mode).\n\nSo we have four addressing modes, namely: ia, ib, da and db. These addressing modes are specified as suffixes of the stm and ldm instructions. So the full set of names is stmia, stmib, stmda, stmdb, ldmia, ldmib, ldmda, ldmdb. Now you may think that this is overly complicated, but we need not use all the eight modes. Only two of them are of interest to us now.\n\nWhen we push something onto the stack we actually decrease the stack pointer (because in Linux the stack grows downwards). More precisely, we first decrease the stack pointer as many bytes as needed before doing the actual store on that just computed stack pointer. So the appropiate addressing-mode when pushing onto the stack is stmdb. Conversely when popping from the stack we will use ldmia: we increment the stack pointer after we have performed the load.\n\n### Factorial again using `stm or push` and `ldm or pop` \n\nBefore illustrating these two instructions, we will first slightly rewrite our factorial.\n\nIf you go back to the code of our factorial, there is a moment, when computing n * factorial(n-1), where the initial value of r0 is required. The value of n was in r0 at the beginning of the function, but r0 can be freely modified by called functions. \n\nIn our second version of factorial, we will keep a copy of the initial value of r0 into r4. But r4 is a register the value of which must be restored upon leaving a function. So we will keep the value of r4 at the entry of the function in the stack. At the end we will restore it back from the stack. This way we can use r4 without breaking the rules of well-behaved functions.\n\n```asm\nfactorial:\n    str lr, [sp,#-4]!  /* Push lr onto the top of the stack */\n    str r4, [sp,#-4]!  /* Push r4 onto the top of the stack */\n                       /* The stack is now 8 byte aligned */\n    mov r4, r0         /* Keep a copy of the initial value of r0 in r4 */\n\n\n    cmp r0, #0         /* compare r0 and 0 */\n    bne is_nonzero     /* if r0 != 0 then branch */\n    mov r0, #1         /* r0 ← 1. This is the return */\n    b end\nis_nonzero:\n                       /* Prepare the call to factorial(n-1) */\n    sub r0, r0, #1     /* r0 ← r0 - 1 */\n    bl factorial\n                       /* After the call r0 contains factorial(n-1) */\n                       /* Load initial value of r0 (that we kept in r4) into r1 */\n    mov r1, r4         /* r1 ← r4 */\n    mul r0, r0, r1     /* r0 ← r0 * r1 */\n\nend:\n    ldr r4, [sp], #+4  /* Pop the top of the stack and put it in r4 */\n    ldr lr, [sp], #+4  /* Pop the top of the stack and put it in lr */\n    bx lr              /* Leave factorial */\n```\n\nThe above program can be improved via `stmdb` and `ldmia` as below: \n\n\n```asm\nfactorial:\n    stmdb sp!, {r4, lr} /* Push r4 and lr onto the stack */\n     \n                       /* The stack is now 8 byte aligned */\n    mov r4, r0         /* Keep a copy of the initial value of r0 in r4 */\n\n\n    cmp r0, #0         /* compare r0 and 0 */\n    bne is_nonzero     /* if r0 != 0 then branch */\n    mov r0, #1         /* r0 ← 1. This is the return */\n    b end\nis_nonzero:\n                       /* Prepare the call to factorial(n-1) */\n    sub r0, r0, #1     /* r0 ← r0 - 1 */\n    bl factorial\n                       /* After the call r0 contains factorial(n-1) */\n                       /* Load initial value of r0 (that we kept in r4) into r1 */\n    mov r1, r4         /* r1 ← r4 */\n    mul r0, r0, r1     /* r0 ← r0 * r1 */\n\nend:\n    ldmia sp!, {r4, lr}    /* Pop lr and r4 from the stack */\n    bx lr              /* Leave factorial */\n```\n\nNote that the order of the registers in the set of registers is not relevant(the order of elements in a set does not matter), but the processor will handle them in ascending order, so we should write them in ascending order. GNU assembler will emit a warning otherwise. Since lr is actually r14 it must go after r4. This means that our code is 100% equivalent to the previous one since **r4 will end in a lower address than lr**: remember our stack grows toward lower addresses, thus r4 which is in the top of the stack in factorial has the lowest address.\n\nRemembering stmdb sp! and ldmia sp! may be a bit hard. Also, given that these two instructions will be relatively common when entering and leaving functions, GNU assembler provides two mnemonics push and pop for stmdb sp! and ldmia sp!, respectively. Note that these are not ARM instructions actually, just convenience names that are easier to remember.\n\nThe above program can be improved via `push` and `pop` as below: \n\n\n```asm\nfactorial:\n    push {r4, lr} /* Push r4 and lr onto the stack */\n     \n                       /* The stack is now 8 byte aligned */\n    mov r4, r0         /* Keep a copy of the initial value of r0 in r4 */\n\n\n    cmp r0, #0         /* compare r0 and 0 */\n    bne is_nonzero     /* if r0 != 0 then branch */\n    mov r0, #1         /* r0 ← 1. This is the return */\n    b end\nis_nonzero:\n                       /* Prepare the call to factorial(n-1) */\n    sub r0, r0, #1     /* r0 ← r0 - 1 */\n    bl factorial\n                       /* After the call r0 contains factorial(n-1) */\n                       /* Load initial value of r0 (that we kept in r4) into r1 */\n    mov r1, r4         /* r1 ← r4 */\n    mul r0, r0, r1     /* r0 ← r0 * r1 */\n\nend:\n    pop {r4, lr}    /* Pop lr and r4 from the stack */\n    bx lr              /* Leave factorial */\n```\n\n## 11 Predication \n\n[Predication on wikipedia](https://en.wikipedia.org/wiki/Predication_(computer_architecture))\n\nInstruction suffix \n\neq, neq, le, lt, ge, gt, al(always, can be omitted) \n\n## 12 loops and the status register \n\nadds(add and update the cpsr)\n\nsubs\n\nbpl(branch if plus, branch if the negative flag is clear) \n\n### Operating 64 bit numbers \n\nadcs(add with carry, update the cpsr)\n\nsbc(subtract with carry)\n\nmultiplication \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}