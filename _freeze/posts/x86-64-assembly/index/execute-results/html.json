{
  "hash": "292ba4ded9c9f728e68af49ec29f0b79",
  "result": {
    "markdown": "---\ntitle: x86-64汇编语言编程\nauthor: 秦米书\ndate: '2023-10-21'\ncategories:\n  - x86-64\n  - assembly\n  - linux\nimage: image.jpg\nformat:\n  html:\n    toc: true\n    toc-depth: 7\ncode-line-numbers: true\n---\n\nThis is a note while studying x86-64 assembler.\n\n# References \n\n[linux syscall table](https://filippo.io/linux-syscall-table/) \n\n[ascii table](https://www.asciitable.com/)\n\n[gnu assembler, or gas, or as](https://ftp.gnu.org/old-gnu/Manuals/gas-2.9.1/html_chapter/as_7.html)\n\n# Notes\n\nGCC(Gnu Compiler Collection) is a front end. It will call `as` and `ld`. The process can be viewed if we use `-v` argument of gcc. \n\nUsing `-g` argument will embed debug info in the object file. E.g. `gcc -c first.s -o first.o -g`. After that, we are able to use `list` in GDB to view the source code. \n\nBelow table lists the size of x86-64 memory/registers. Some is different from ARM. For example, in ARM, A `.word` means 32 bits. \n\n| term | size (bits) |\n|------|------|\n| byte     |  8    |\n| word     |  16    |\n| dword     | 32     |\n| qword     | 64     |\n\nIn x86-64, use `.long` or `.int` to specify 64 bits integer. In ARM, use `.word` to specify 32 bits integer. Note, `.word` or `.short` may have different lengths in different machine. They are machine dependent. \n\nSTDIN file descriptor is 0. STDOUT file descriptor is 1.  STDERR file descriptor is 2. \n\nThe labels in the assembly program begins with `_`, e.g. `_start`, is due to the convention of C compiler. It is the simple name mangaling. `C++` has more complex name mangling.  \n\n## Hello world program \n\nThe program is copied from [x86-64 Assembly on youtube, from Mike Shah](https://www.youtube.com/watch?v=3nYHV5zIQGA&list=PLvv0ScY6vfd9BSBznpARlKGziF1xrlU54&index=1)\n\nIt refers to the [linux syscall table](https://filippo.io/linux-syscall-table/)\n\nIn intel format. \n```ASM\n/*first.s*/\n.intel_syntax noprefix\n.global _start \n.hello.str: \n\t.ascii \"12345678\\n\" \n\n.text \n\n_start: \n\tmovq rbp, rsp \n\tmovq rax, 1  \n\tmovq rdi, 1  \n\tleaq rsi, .hello.str  \n\tmovq rdx, 9  \n\tsyscall \n\t\n\tmovq rax, 60  \n\tmovq rdi, 0  \n\tsyscall \n\t\n\tpop rbp \n```\n\nTo build it. \n\n```bash \nas -o first.o first.s \nld -o first first.o \n```\n\nIn AT&T format. \n```ASM \n/*first.s*/\n\n.global _start \n.hello.str: \n\t.ascii \"12345678\\n\" \n\n.text \n\n_start: \n\tmovq %rsp, %rbp \n\tmovq $1, %rax    \n\tmovq $1, %rdi   \n\tleaq .hello.str, %rsi    \n\tmovq $9, %rdx  \n\tsyscall \n\t\n\tmovq $60, %rax  \n\tmovq $0, %rdi   \n\tsyscall \n\t\n\tpop %rbp \n```\n\nTo build it. The below 2 ways are both OK. \n```bash\nas -o first.o first.s \nld -o first first.o \n\ngcc -c first.s -o first.o \nld -o first first.o \n```\n\n## call \n\n```ASM\n/*first.s*/\n# there is also .bss segment for not initialized global data \n.data \n.hello.str: \n\t.ascii \"12345678\\n\" \n\n.text \n\n_write_str: \n\tmovq %rsp, %rbp \n\tmovq $1, %rax    \n\tmovq $1, %rdi   \n\tleaq .hello.str, %rsi    \n\tmovq $9, %rdx  \n\tsyscall \n\tret \n_exit:\n\tmovq $60, %rax  \n\tmovq $0, %rdi   \n\tsyscall \n\tret \n\n.global _start \n_start: \n\tcall _write_str \n\tcall _exit \n\tpop %rbp \n```\n\n# Book X64 Assembly Language Step by Step \n\n## Chap1 It's all in the Plan: Understanding What Computers Really Do \n\nA computer program is a list of steps and tests, nothing more. \n\nA test is the sort of either/or decision we make. \n- First, you take a look at sth that can go one of two way. \n- Then you do one of two things, depending on what you saw when you took a look. \n\n## Chap2 Allien Bases: Getting Your Arms Around Binary and Hexadecimal \n\noctal \n\nhexadecimal \n\nbinary \n\n## Chap3 Lifting the Hood: Discovering What Computers Actually Are \n\nA bit is a single binary digit, either 1 or 0. \n\nA byte is eight bits. \n\nTwo bytes side by side are called a word. \n\nTwo words side by side are called a double word. \n\nA quad word consists of two double words. \n\nA group of four bits is called a nybble. \n\n## Chap4 Location: Registers, Memory Addressing, and Knowing Where Things Are \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}