[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "关于",
    "section": "",
    "text": "欢迎来到亲密数频道!\n个人简介：我从事通信行业的软件开发工作，已经超过10年，至今对信息技术仍充满热情。 我参与过GSM、WCDMA、IMS、LTE、5G等几代网络的网元和协议的开发。我有在Linux、Windows及云计算平台上的应用开发经验。我对几种编程范式如面向过程、面向对象及函数式编程等有一定的理解。我使用过多种编程语言进行开发，如C/C++、Java、Python、Go等。同时我对互联网相关技术如HTML、CSS、Javascript和游戏开发等方面也感兴趣。我也具有一定的用Python或Julia进行数据分析的技能。 业余时间我喜欢看数学、文学、历史等方面的书籍。总体而言我是个热爱技术、乐于学习的技术人员。"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "亲密数",
    "section": "",
    "text": "欢迎来到亲密数频道!\n\n\n\n\n\n\n\n\n  \n\n\n\n\nSignal and System a Primer\n\n\n\n\n\n\n\ntelecom\n\n\n\n\n\n\n\n\n\n\n\nSep 10, 2023\n\n\n秦米书\n\n\n\n\n\n\n  \n\n\n\n\nARM汇编语言编程\n\n\n\n\n\n\n\narm\n\n\nassembly\n\n\nraspberry-pi\n\n\n\n\n\n\n\n\n\n\n\nApr 6, 2023\n\n\n秦米书\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 6, 2023\n\n\n秦米书\n\n\n\n\n\n\n  \n\n\n\n\n欢迎来到我的博客\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 3, 2023\n\n\n秦米书\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "这是一篇带有代码的博客.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "欢迎来到我的博客",
    "section": "",
    "text": "这是第一篇博客. 欢迎!"
  },
  {
    "objectID": "posts/arm-assembly/index.html",
    "href": "posts/arm-assembly/index.html",
    "title": "ARM汇编语言编程",
    "section": "",
    "text": "以下内容为学习https://thinkingeek.com/2013/01/27/arm-assembler-raspberry-pi-chapter-8/的摘录.\n\n\nThese sets of allowed operands in instructions are collectively called indexing modes.\n\n\n\nAn array is a sequence of items of the same kind in memory."
  },
  {
    "objectID": "posts/arm-assembly/index.html#chap7-数组和结构体",
    "href": "posts/arm-assembly/index.html#chap7-数组和结构体",
    "title": "ARM架构汇编语言编程",
    "section": "",
    "text": "1 + 1"
  },
  {
    "objectID": "posts/arm-assembly/index.html#索引模式的定义",
    "href": "posts/arm-assembly/index.html#索引模式的定义",
    "title": "ARM汇编语言编程-08-数组和结构体",
    "section": "索引模式的定义",
    "text": "索引模式的定义\nThese sets of allowed operands in instructions are collectively called indexing modes."
  },
  {
    "objectID": "posts/arm-assembly/index.html#数组和结构体",
    "href": "posts/arm-assembly/index.html#数组和结构体",
    "title": "ARM汇编语言编程",
    "section": "",
    "text": "以下内容为学习https://thinkingeek.com/2013/01/27/arm-assembler-raspberry-pi-chapter-8/的摘录.\n\n\nThese sets of allowed operands in instructions are collectively called indexing modes.\n\n\n\nAn array is a sequence of items of the same kind in memory."
  },
  {
    "objectID": "posts/arm-assembly/index.html#函数",
    "href": "posts/arm-assembly/index.html#函数",
    "title": "ARM汇编语言编程",
    "section": "09-函数",
    "text": "09-函数\n以下内容为学习https://thinkingeek.com/2013/02/02/arm-assembler-raspberry-pi-chapter-9/的摘录.\nFunctions are a way to reuse code.\nAAPCS:Procedure Call Standard for ARM Architecture\n\n\n\nRegister\nRegister Alias\nDescription\nRemark\n\n\n\n\nr15\npc\nProgram Counter\n\n\n\nr14\nlr\nLink Register\n\n\n\nr13\nsp\nStack Pointer\n\n\n\n\ncpsr\nCurrent Program Status Register\n\n\n\n\nFunctions can receive parameters. The first 4 parameters must be stored, sequentially, in the registers r0, r1, r2 and r3.\n\nWell behaved functions\nA function must adhere, at least, to the following rules if we want it to be AAPCS compliant.\n\nA function should not make any assumption on the contents of the cpsr. So, at the entry of a function condition codes N, Z, C and V are unknown.\nA function can freely modify registers r0, r1, r2 and r3.\nA function cannot assume anything on the contents of r0, r1, r2 and r3 unless they are playing the role of a parameter.\nA function can freely modify lr but the value upon entering the function will be needed when leaving the function (so such value must be kept somewhere).\nA function can modify all the remaining registers as long as their values are restored upon leaving the function. This includes sp and registers r4 to r11.\nThis means that, after calling a function, we have to assume that (only) registers r0, r1, r2, r3 and lr have been overwritten.\n\n\n\nCalling a function\ndirect call:\nbl label\nindirect call(first storing the address of the function into a register):\nblx Rsource1 /* Rsource1 means register operand1 */\nIn both cases the behaviour is as follows: the address of the function (immediately encoded in the bl or using the value of the register in blx) is stored in pc. The address of the instruction following the bl or blx instruction is kept in lr.\n\n\nLeaving a function\nA well behaved function, as stated above, will have to keep the initial value of lr somewhere. When leaving the function, we will retrieve that value and put it in some register (it can be lr again but this is not mandatory). Then we will bx Rsource1 (we could use blx as well but the latter would update lr which is useless here).\n\n\nReturning data from functions\nFunctions must use r0 for data that fits in 32 bit (or less). This is, C types char, short, int, long (and float though we have not seen floating point yet) will be returned in r0. For basic types of 64 bit, like C types long long and double, they will be returned in r1 and r0. Any other data is returned through the stack unless it is 32 bit or less, where it will be returned in r0.\n\n\nHello world (puts)\n/* -- hello01.s */\n.data\n\ngreeting:\n .asciz \"Hello world\"\n\n.balign 4\nreturn: .word 0\n\n.text\n\n.global main\nmain:\n    ldr r1, address_of_return     /*   r1 ← &address_of_return */\n    str lr, [r1]                  /*   *r1 ← lr */\n\n    ldr r0, address_of_greeting   /* r0 ← &address_of_greeting */\n                                  /* First parameter of puts */\n\n    bl puts                       /* Call to puts */\n                                  /* lr ← address of next instruction */\n\n    ldr r1, address_of_return     /* r1 ← &address_of_return */\n    ldr lr, [r1]                  /* lr ← *r1 */\n    bx lr                         /* return from main */\naddress_of_greeting: .word greeting\naddress_of_return: .word return\n\n/* External */\n.global puts\n\n\nInteraction (scanf, printf)\n/* -- printf01.s */\n.data\n\n/* First message */\n.balign 4\nmessage1: .asciz \"Hey, type a number: \"\n\n/* Second message */\n.balign 4\nmessage2: .asciz \"I read the number %d\\n\"\n\n/* Format pattern for scanf */\n.balign 4\nscan_pattern : .asciz \"%d\"\n\n/* Where scanf will store the number read */\n.balign 4\nnumber_read: .word 0\n\n.balign 4\nreturn: .word 0\n\n.text\n\n.global main\nmain:\n    ldr r1, address_of_return        /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    ldr r0, address_of_message1      /* r0 ← &message1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    bl scanf                         /* call to scanf */\n\n    ldr r0, address_of_message2      /* r0 ← &message2 */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    ldr r1, [r1]                     /* r1 ← *r1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_number_read   /* r0 ← &number_read */\n    ldr r0, [r0]                     /* r0 ← *r0 */\n\n    ldr lr, address_of_return        /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_message1 : .word message1\naddress_of_message2 : .word message2\naddress_of_scan_pattern : .word scan_pattern\naddress_of_number_read : .word number_read\naddress_of_return : .word return\n\n/* External */\n.global printf\n.global scanf\n\n\nFirst function (multiply by 5)\n/* -- printf02.s */\n.data\n\n/* First message */\n.balign 4\nmessage1: .asciz \"Hey, type a number: \"\n\n/* Second message */\n.balign 4\nmessage2: .asciz \"%d times 5 is %d\\n\"\n\n/* Format pattern for scanf */\n.balign 4\nscan_pattern : .asciz \"%d\"\n\n/* Where scanf will store the number read */\n.balign 4\nnumber_read: .word 0\n\n.balign 4\nreturn: .word 0\n\n.balign 4\nreturn2: .word 0\n\n.text\n\n/*\nmult_by_5 function\n*/\nmult_by_5: \n    ldr r1, address_of_return2       /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    add r0, r0, r0, LSL #2           /* r0 ← r0 + 4*r0 */\n\n    ldr lr, address_of_return2       /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_return2 : .word return2\n\n.global main\nmain:\n    ldr r1, address_of_return        /* r1 ← &address_of_return */\n    str lr, [r1]                     /* *r1 ← lr */\n\n    ldr r0, address_of_message1      /* r0 ← &message1 */\n    bl printf                        /* call to printf */\n\n    ldr r0, address_of_scan_pattern  /* r0 ← &scan_pattern */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    bl scanf                         /* call to scanf */\n\n    ldr r0, address_of_number_read   /* r0 ← &number_read */\n    ldr r0, [r0]                     /* r0 ← *r0 */\n    bl mult_by_5\n\n    mov r2, r0                       /* r2 ← r0 */\n    ldr r1, address_of_number_read   /* r1 ← &number_read */\n    ldr r1, [r1]                     /* r1 ← *r1 */\n    ldr r0, address_of_message2      /* r0 ← &message2 */\n    bl printf                        /* call to printf */\n\n    ldr lr, address_of_return        /* lr ← &address_of_return */\n    ldr lr, [lr]                     /* lr ← *lr */\n    bx lr                            /* return from main using lr */\naddress_of_message1 : .word message1\naddress_of_message2 : .word message2\naddress_of_scan_pattern : .word scan_pattern\naddress_of_number_read : .word number_read\naddress_of_return : .word return\n\n/* External */\n.global printf\n.global scanf"
  },
  {
    "objectID": "posts/signal-and-system/index.html",
    "href": "posts/signal-and-system/index.html",
    "title": "Signal and System a Primer",
    "section": "",
    "text": "This is a note for Signal and System a Primer with Matlab. I don’t have Matlab, but I may use Scilab/Octave/Python/Julia/R/Haskell instead when necessary."
  },
  {
    "objectID": "posts/signal-and-system/index.html#basic-continuous-time-signals",
    "href": "posts/signal-and-system/index.html#basic-continuous-time-signals",
    "title": "Signal and System a Primer",
    "section": "1.4 basic continuous time signals",
    "text": "1.4 basic continuous time signals\nUnit step function u(t)\n\\[\nu(t) = \\begin{cases}\n   1 &\\text{t &gt; 0} \\\\\n   0 &\\text{t &lt; 0}   \n\\end{cases}\n\\]\nUnit impulse function \\(\\delta(t)\\)\n\\[\n\\delta(t) = \\frac{d}{dt}u(t) = \\begin{cases}\n   0 & t \\ne 0 \\\\\n   \\text{undefined} & t = 0\n\\end{cases}\n\\]\nThe impulse function has the property(called sampling or sifting property)\n\\[\n\\int_{a}^{b} f(t) \\delta(t-t_0)  dt = \\int_{a}^{b} f(t_0) \\delta(t-t_0) dt = f(t_0) \\int_{a}^{b} \\delta(t-t_0) dt = f(t_0)\n\\]\nUnit ramp function\n\\[\nr(t) = t \\times u(t)\n\\]\nUnit rectangle pulse function\nUnit triangular pulse function\nsinusoidal signal\nexponential signal"
  },
  {
    "objectID": "posts/signal-and-system/index.html#basic-discrete-time-signals",
    "href": "posts/signal-and-system/index.html#basic-discrete-time-signals",
    "title": "Signal and System a Primer",
    "section": "1.5 basic discrete time signals",
    "text": "1.5 basic discrete time signals\nUnit step sequence\n\\[\nu(n) = \\begin{cases}\n   0 &\\text{n &lt; 0} \\\\\n   1 & n \\ge 0\n\\end{cases}\n\\]\nUnit impulse sequence\n\\[\n\\delta(n) = \\begin{cases}\n   0 & n \\ne 0 \\\\\n   1 & n = 0\n\\end{cases}\n\\]\nUnit ramp sequence\n\\[\nr(n) = \\begin{cases}\n   0 & n &lt; 0 \\\\\n   n & n \\ge 0\n\\end{cases}\n\\]\nSinusoidal sequence\nExponential sequence"
  },
  {
    "objectID": "posts/signal-and-system/index.html#basic-operations-on-signals",
    "href": "posts/signal-and-system/index.html#basic-operations-on-signals",
    "title": "Signal and System a Primer",
    "section": "1.6 Basic operations on signals",
    "text": "1.6 Basic operations on signals\nTime reversal\nTime scaling\nTime shifting\nAmplitude transformation"
  },
  {
    "objectID": "posts/signal-and-system/index.html#classifications-of-systems",
    "href": "posts/signal-and-system/index.html#classifications-of-systems",
    "title": "Signal and System a Primer",
    "section": "1.7 Classifications of systems",
    "text": "1.7 Classifications of systems\ncontinuous time vs discrete time systems\ncausal vs noncausal systems: A causal system is one whose output y(t) at present time depends only on the present and past values(not future) of the input x(t).\nlinear and nonlinear systems: Linearity is the property of the system describing a linear relationship between input (cause) and output (effect). The property is a combination of both homogeneity(scaling) property and the additivity property. The homogeneity property requires that if the input is multiplied by any constant k, then the output is multiplied by the same constant. The additivity property requires that the response to a sum of inputs is the sum of the responses to each input applied separately.\n\\[\nT \\lbrace k_1 x_1 + k_2 x_2 \\rbrace = k_1 y_1 + k_2 y_2\n\\]\ntime varying and time invariant systems: A time-varying system is one whose parameters vary with time. In a time-invariant system, a time shift (advance or delay) in the input signal leads to the time shift in the output signal.\nsystems with and without memory: When the output of a system depends on the past and/or future input, the system is said to have a memory. A memoryless system is one in which the current output depends only on the current input; it does not depend on the past or future inputs.A system with a memory is also called a dynamic system. A memoryless system is called a static system."
  },
  {
    "objectID": "posts/signal-and-system/index.html#impulse-response",
    "href": "posts/signal-and-system/index.html#impulse-response",
    "title": "Signal and System a Primer",
    "section": "2.2 Impulse response",
    "text": "2.2 Impulse response\nThe impulse response h(t) is the response of the system when the input is the unit impulse function \\(\\delta(t)\\), that is,\n\\[\nh(t) = T \\delta(t)\n\\]\nThe input signal x(t) can be expressed as (\\(\\tau\\) is a dummy variable) the below equation. It is the sifting property of the unit impulse.\n\\[\nx(t) = \\int_{-\\infty}^{+\\infty} x(\\tau) \\delta(t-\\tau)d\\tau   \n\\]\nThe response y(t) to the input x(t) is obtained by:\n\\[\n\\begin{align}\ny(t) &= Tx(t)=T \\lbrace \\int_{-\\infty}^{+\\infty} x(\\tau) \\delta(t-\\tau)d\\tau \\rbrace \\\\\n&= \\int_{-\\infty}^{+\\infty} x(\\tau) T \\lbrace \\delta(t-\\tau) \\rbrace d\\tau \\\\\n&= \\int_{-\\infty}^{+\\infty} x(\\tau)  h(t-\\tau)  d\\tau\n\\end{align}\n\\]\nThis shows that an LTI system is characterized by its impulse response."
  },
  {
    "objectID": "posts/signal-and-system/index.html#convolution-integral",
    "href": "posts/signal-and-system/index.html#convolution-integral",
    "title": "Signal and System a Primer",
    "section": "2.3 Convolution Integral",
    "text": "2.3 Convolution Integral\nThe below equation is also called convolution integral or superposition integral.\n\\[\ny(t) = \\int_{-\\infty}^{+\\infty} x(\\tau)  h(t-\\tau)  d\\tau\n\\]\nThe convolution of two signals x(t) and h(t) is usually written in terms of the operator *. That is, y(t) equals x(t) convolved with h(t).\n\\[\ny(t) = x(t) * h(t) = \\int_{-\\infty}^{+\\infty} x(\\tau)  h(t-\\tau)  d\\tau\n\\]\nWe can split the integral into two parts:\n\\[\ny(t) = x(t) * h(t) = \\int_{-\\infty}^{t_0} x(\\tau)  h(t-\\tau)  d\\tau + \\int_{t_0}^{+\\infty} x(\\tau)  h(t-\\tau)  d\\tau\n\\]\nThe 1st part is \\(y_{zir}\\), the 2nd part is \\(y_{zsr}\\).\nZIR: Zero Input Response. (natural response)\nZSR: Zero State Response. (the forced response)\n\\(t_0\\) is the initial time.\nThe convolution integral can be simplified if we assume that a system has two properties.\nFirst, if x(t) = 0 for t &lt; 0, then\n\\[\ny(t) = x(t) * h(t) = \\int_{-\\infty}^{+\\infty} x(\\tau) h(t-\\tau)  d\\tau = \\int_{0}^{+\\infty} x(\\tau) h(t-\\tau)  d\\tau\n\\]\nSecond, if we assume that the system is causal (that is y(t) does not depend on future signal of x(t) or h(t)), h(t) = 0 for t &lt; 0, the equation becomes,\n\\[\ny(t) = x(t) * h(t) = \\int_{-\\infty}^{+\\infty} x(\\tau) h(t-\\tau)  d\\tau = \\int_{0}^{t} x(\\tau) h(t-\\tau)  d\\tau\n\\]\nImportant properties of the convolution integral:\n\nThe order in which two functions are convolved is unmportant.\nWidth property. If the durations of x(t) and h(t) are \\(T_1\\) and \\(T_2\\), then the duration of \\(y(t) = x(t) * h(t)\\) is \\(T_1 + T_2\\). If the areas under x(t) and h(t) are \\(A_1\\) and \\(A_2\\), then the area under \\(y(t) = x(t) * h(t)\\) is \\(A_1A_2\\).\n\nThe convolution integral can be evaluated in 3 different ways:\n\nAnalytical method, which involves performing the integration by hand when x(t) and h(t) are specified analytically.\n\nGraphical method, which is appropriate when x(t) and h(t) are provided in graphical form.\n\nNumerical method, where we approximate x(t) and h(t) by numerical sequence and obtain y(t) by discrete convolution using a digital computer."
  },
  {
    "objectID": "posts/signal-and-system/index.html#graphical-convolution",
    "href": "posts/signal-and-system/index.html#graphical-convolution",
    "title": "Signal and System a Primer",
    "section": "2.4 Graphical convolution",
    "text": "2.4 Graphical convolution\nGraphical method of evaluating the convolution integral. This method usually involves 4 steps:\n\nFolding: Take the mirror image of \\(h(\\tau)\\) about the ordinate(vertical) axis\nShifting: Displace or shift \\(h(\\tau)\\) by t to obtain \\(h(t-\\tau)\\)\nMultiplication: Multiply \\(h(t-\\tau)\\) and \\(x(\\tau)\\) together\nIntegration: For a given t, integrate the product \\(h(t-\\tau)x(\\tau)\\) over \\(0 &lt; \\tau &lt; t\\) to get y(t) at t\n\nWe are going to use the below auxiliary functions.\n\nfunction step(t)\n    if t &gt;= 0  \n        return 1 \n    else \n        return 0 \n    end \nend \n\nfunction ramp(t)\n    return t*step(t)\nend \n\nramp (generic function with 1 method)\n\n\nObtain the convolution of the two signals in Figure 1\n\nusing Plots\nusing LaTeXStrings \n\nx(t) = step(t) \n\nh(t) = ramp(t+2) * step(-t) + 2*step(t)*step(2-t)\n\nxplot = plot(x,-2,2,title=\"x(t)\")\nhplot = plot(h,-2,2,title=\"h(t)\")\nplot(xplot,hplot,layout=(1,2), legend=false)\n\n\n\n\nFigure 1: graph convolution example\n\n\n\n\nDefinition of x(t) \\[\nx(t) = step(t)\n\\]\nDefinition of h(t) \\[\nh(t) = \\begin{cases}\n   2+t &\\text{-2 &lt; t &lt; 0} \\\\\n   1 &\\text{0 &lt; t &lt; 2}   \n\\end{cases}\n\\]\nIn this case, it is easy to fold x(t), the unit step function. Let\n\\[\ny(t) = x(t)*h(t) = \\int x(t-\\tau)h(\\tau)d\\tau\n\\]\nFirst, we fold x(t)\n\nx_fold(t) = x(-t)\n\nplot(x_fold, -2, 2, title=L\"x(- \\tau)\", legend=false)\n\n\n\n\nand shift it by t\n\nt = 1\n\nx_shift(tau) = x(t-tau)\n\nplot(x_shift, -3, 2, title=L\"x(t - \\tau)\", legend=false)\n\n\n\n\nFor \\(t &lt; -2\\), there is no overlap of the two signals, as shown in Figure 2 , Hence,\n\\[\ny(t) = x(t) * h(t) = 0, t&lt; -2\n\\]\n\nt = -2.5 \n\nplot(x_shift,-3,2,label=L\"x(t - \\tau)\")\nplot!(h,-3,2,label=L\"h(\\tau)\")\ntitle!( \"convolution x(t)*h(t), t &lt; -2\")\n\n\n\n\nFigure 2: t &lt; -2\n\n\n\n\nFor -2 &lt; t &lt; 0, the two signals overlap between -2 and t, as shown in figure Figure 3 , Hence,\n\\[\n\\begin{align}\ny(t) &= \\int_{-2}^{t} x(t-\\tau)h(\\tau)d\\tau \\\\\n&= \\int_{-2}^{t} (1)(2+\\tau) d\\tau \\\\\n&= 2\\tau + \\frac{\\tau^2}{2} \\biggr\\rvert_{-2}^{t} = 0.5 t^2 + 2t + 2, \\text{-2 &lt; t &lt; 0}\n\\end{align}\n\\]\n\nt = -1.5 \n\nplot(x_shift,-3,2,label=L\"x(t - \\tau)\")\nplot!(h,-3,2,label=L\"h(\\tau)\")\ntitle!( \"convolution x(t)*h(t), -2 &lt; t &lt; 0\")\n\n\n\n\nFigure 3: -2 &lt; t &lt; 0\n\n\n\n\nFor 0 &lt; t &lt; 2, the two signals overlap between -2 and t, as shown in figure Figure 4 , Hence,\n\\[\n\\begin{align}\ny(t) &= \\int_{-2}^{t} x(t-\\tau)h(\\tau)d\\tau \\\\\n&= \\int_{-2}^{0} (1)(2+\\tau) d\\tau + \\int_{0}^{t}(1)(2) d\\tau \\\\\n&= (2 \\tau + \\frac{\\tau^2}{2}) \\biggr\\rvert_{-2}^{0} + 2 \\tau \\biggr\\rvert_{0}^{t} \\\\\n&= 2+2t , \\text{0 &lt; t &lt; 2}\n\\end{align}\n\\]\n\nt = 1 \n\nplot(x_shift,-3,2,label=L\"x(t - \\tau)\")\nplot!(h,-3,3,label=L\"h(\\tau)\")\ntitle!( \"convolution x(t)*h(t), 0 &lt; t &lt; 2\")\n\n\n\n\nFigure 4: 0 &lt; t &lt; 2\n\n\n\n\nFor t &gt; 2, the two signals overlap between -2 and 2, as shown in figure Figure 5 , Hence,\n\\[\n\\begin{align}\ny(t) &= \\int_{-2}^{t} x(t-\\tau)h(\\tau)d\\tau \\\\\n&= \\int_{-2}^{0} (1)(2+\\tau) d\\tau + \\int_{0}^{2}(2)(2) d\\tau \\\\\n&= (2 \\tau + \\frac{\\tau^2}{2}) \\biggr\\rvert_{-2}^{0} + 2 \\tau \\biggr\\rvert_{0}^{2} \\\\\n&= 6 , \\text{ t &gt; 2}\n\\end{align}\n\\]\n\nt = 2.5\n\nplot(x_shift,-3,3,label=L\"x(t - \\tau)\")\nplot!(h,-3,3,label=L\"h(\\tau)\")\ntitle!( \"convolution x(t)*h(t), t &gt; 2\")\n\n\n\n\nFigure 5: t &gt; 2\n\n\n\n\nCombining the results, we obtain, see Figure 6\n\\[\ny(t) = \\begin{cases}\n   0.5t^2 + 2t + 2,  &\\text{-2 &lt; t &lt; 0} \\\\\n   2t+2,  &\\text{0 &lt; t &lt; 2} \\\\\n   6, &\\text{ t &gt; 2} \\\\\n   0, &\\text{otherwise}\n\\end{cases}\n\\]\n\ny(t) = begin \n   if (-2 &lt;= t) && (t &lt;= 0)\n      0.5*t*t + 2*t + 2 \n   elseif (0 &lt;= t) && (t &lt;= 2)\n      2*t + 2 \n   elseif t &gt; 2 \n      6 \n   else\n      0  \n   end    \nend \n\nplot(y,-4,4)\ntitle!( \"convolution x(t)*h(t), result\")\n\n\n\n\nFigure 6: convolution result"
  },
  {
    "objectID": "posts/signal-and-system/index.html#block-diagram-representation",
    "href": "posts/signal-and-system/index.html#block-diagram-representation",
    "title": "Signal and System a Primer",
    "section": "2.5 Block Diagram Representation",
    "text": "2.5 Block Diagram Representation\nThe commutative property of the convolution integral.\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x(t)\" ]--&gt;h[\"h(t)\" ]--&gt;y[\"y(t)\"];\n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    h1[\"h(t)\" ]--&gt;x1[\"x(t)\" ]--&gt;y1[\"y(t)\"];\n    style h1 stroke-width:0px\n    style y1 stroke-width:0px\nend \n\ng1-.-|equals|g2\n\n\n\n\n\nThe associative property of the convolution integral.\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x(t)\" ]--&gt;h1[\"h1(t)\" ]--&gt;h2[\"h2(t)\" ]--&gt;y[\"y(t)\"];\n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    xx[\"x(t)\" ]--&gt;convolution[\"h1(t)*h2(t)\" ]--&gt;yy[\"y(t)\"];\n    style xx stroke-width:0px\n    style yy stroke-width:0px\nend \n\ng1-.-|equals|g2\n\n\n\n\n\nThe distributive property of the convolution integral.\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x(t)\"]--&gt;h1[\"h1(t)\"] & h2[\"h2(t)\"] \n    h1--&gt;y[\"y(t)\"] \n    h2--&gt;y \n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    xx[\"x(t)\" ]--&gt;addition[\"h1(t)+h2(t)\" ]--&gt;yy[\"y(t)\"];\n    style xx stroke-width:0px\n    style yy stroke-width:0px\nend \n\ng1-.-|equals|g2"
  },
  {
    "objectID": "posts/signal-and-system/index.html#discrete-convolution",
    "href": "posts/signal-and-system/index.html#discrete-convolution",
    "title": "Signal and System a Primer",
    "section": "2.6 Discrete Convolution",
    "text": "2.6 Discrete Convolution\nUnit step sequence definition\n\\[\nu[n] = \\begin{cases}\n   0 \\ n &lt; 0 \\\\\n   1 \\ n \\ge 0\n\\end{cases}\n\\]\nUnit impulse sequence definition\n\\[\n\\delta(n) = \\begin{cases}\n    0 \\ n \\ne 0 \\\\\n    1 \\ n = 0\n\\end{cases}\n\\]\nAn alternative way of expressing any discrete signal x[n]. I.e. we can represent x[n] as a weighted sum of delayed impulses.\n\\[\nx[n] = \\sum_{k=-\\infty}^{\\infty} x[k] \\delta[n-k]\n\\]\nThe multiplication property of the impulse function is (The 2 equations hold because \\(\\delta[n] = 1\\) only if n is 0 )\n\\[\n\\begin{align}\n\\delta[n] x[n-k] &= x[-k] \\delta[n] \\\\\n\\delta[n-k] x[n] &= x[k] \\delta[n-k]\n\\end{align}\n\\]\nThe impulse response h[n] of of a discrete LTI system is the response of the system when the input is \\(\\delta[n]\\). I.e.\n\\[\nh[n] = T\\{\\delta[n]\\}\n\\]\nor\n\n\n\n\nflowchart LR \n      \n    delta[\"δ[n]\" ]--&gt;s[\"system T\" ]--&gt;h[\"h[n]\"];\n    style delta stroke-width:0px\n    style h stroke-width:0px\n\n\n\n\n\nThe convolution of the discrete input signal x[n] and impulse response h[n] is (* is the convolution symbol)\n\\[\ny[n] = x[n] * h[n]\n\\]\nIt is defined as\n\\[\ny[n] = \\sum_{k=-\\infty}^{\\infty} x[k] h[n-k]\n\\]\nThis is known as the convolution sum or superposition sum for the system response.\nAs in continuous time convolution, one of the signals is time-inverted, shifted and then multiplied by the other. By the change of variables \\(m=n-k\\), we have (m in the below equation, and k in the above equation are called dummy variables)\n\\[\ny[n] = \\sum_{m=-\\infty}^{\\infty} x[n-m] h[m]\n\\]\nThis shows the order of summation is immaterial; discrete convolution is commutative.\nProperties of convolution sum.\n\\[\n\\begin{align}\n& x[n]*h[n] = h[n]*x[n] \\quad \\text{commutative} \\\\\n& f[n]*[x[n]+y[n]] = f[n]*x[n] + f[n]*y[n] \\quad \\text{distributative} \\\\\n& f[n]*[x[n]*y[n]] = [f[n]*x[n]]*y[n] \\quad \\text{associative} \\\\\n& x[n-m]*h[n-k] = y[n-m-k] \\quad \\text{shifting} \\\\\n& x[n]*\\delta[n] = x[n]\n\\end{align}\n\\]\nIf both x[n] and h[n] are causal, that is, x[n] and h[n] are 0 for all $ n &lt; 0 $, the summation becomes\n\\[\ny[n] = \\sum_{m=0}^{n} x[n-m] h[m]\n\\]\nThe convolution of M-point sequence with a N-point sequence produces an (M+N-1)-point sequence.\nEvaluating the convolution sum requires the following steps:\n\nThe signal h[k] is time-reversed to get h[−k] and then shifted by n to form h[n − k] or h[−(k − n)], which should be regarded as a function of k with parameter n.\nFor a fixed value of n, multiply x[k] and h[n − k] for all values of k.\nThe product x[k]h[n − k] is summed over all k to produce a single value of y[n].\nRepeat steps 1–3 for various values of n to produce the entire output y[n].\n\nExample, find r[n], given that r[n] is the convolution of 2 unit step sequences, that is\n\\[\nr[n] = u[n] * u[n]\n\\]\nSolution:\n\\[\nr[n] = u[n] * u[n] = \\sum_{k=-\\infty}^{\\infty} u[k] u[n-k]\n\\]\nThe function u[k], u[-k], u[n-k] are shown in in@fig-discrete-convolution-ex . The convolution takes place when we multiply the sequences (a) with (c) and (d).\nFor \\(n&lt;0\\), the non-zero values of u[k] and u[n-k] do not overlap, so \\(u[k] u[n-k] = 0\\) for all values of k. This implies that \\(r[n] = 0\\) for \\(n &lt; 0\\).\nFor \\(n \\ge 0\\), he non-zero values of u[k] and u[n-k] overlap. This overlap begins with u[k] at k = 0 and ends with u[n-k] at k = n. Hence,\n\\[\nr[n] = \\sum_{k=0}^n u[k]u[n-k] = \\sum_{k=0}^n (1) = n + 1\n\\]\nTherefore (considering both \\(n&lt;0\\) and \\(n \\ge 0\\)), \\(r[n] = (n+1)u[n]\\). This is the unit ramp sequence and is shown in (e).\n\nusing Plots\n\nu(k)=begin\n    if k &gt;= 0 \n        1\n    else \n        0 \n    end \nend \n\nn = -3 \nxs = collect(-10:10)\ny_u_k = u.(xs) \ny_minus_u_k =  u.(xs*(-1)) \n\n#n &lt; 0 \ny_n_minus_k = u.((xs .- n)*(-1))\n\nu_k = plot(xs,y_u_k,seriestype=:sticks,markershape=:circle, ylimit=[0,2],legend=false,title=\"u(k) --- (a)\") \n\nu_minus_k = plot(xs,y_minus_u_k,seriestype=:sticks,markershape=:circle, ylimit=[0,2],legend=false,title=\"u(-k) --- (b)\") \n\nu_n_minus_k = plot(xs,y_n_minus_k,seriestype=:sticks,markershape=:circle, ylimit=[0,2],legend=false,title=\"u(n-k) n&lt;0 --- (c)\") \n\nn = 3 \n# n &gt; 0 \ny_n_minus_k = u.((xs .- n)*(-1))\nu_n_minus_k_n_gt_0 = plot(xs,y_n_minus_k,seriestype=:sticks,markershape=:circle, ylimit=[0,2],legend=false,title=\"u(n-k) n&gt;=0 --- (d)\") \n\nr(k) = u(k)*(k+1)\nr_sequence = r.(xs) \nr_n = plot(xs,r_sequence,seriestype=:sticks,markershape=:circle, ylimit=[0,12],legend=false,title=\"r(n) --- (e)\") \n\nplot(u_k,u_minus_k,u_n_minus_k,u_n_minus_k_n_gt_0,r_n,layout=(3,2))\n\n\n\n\nFigure 7: discrete convolution example"
  },
  {
    "objectID": "posts/signal-and-system/index.html#block-diagram-representation-of-continuous-signal-convolution-properties",
    "href": "posts/signal-and-system/index.html#block-diagram-representation-of-continuous-signal-convolution-properties",
    "title": "Signal and System a Primer",
    "section": "2.5 Block Diagram Representation of continuous signal convolution properties",
    "text": "2.5 Block Diagram Representation of continuous signal convolution properties\nThe commutative property of the convolution integral.\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x(t)\" ]--&gt;h[\"h(t)\" ]--&gt;y[\"y(t)\"];\n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    h1[\"h(t)\" ]--&gt;x1[\"x(t)\" ]--&gt;y1[\"y(t)\"];\n    style h1 stroke-width:0px\n    style y1 stroke-width:0px\nend \n\ng1-.-|equals|g2\n\n\n\n\n\nThe associative property of the convolution integral.\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x(t)\" ]--&gt;h1[\"h1(t)\" ]--&gt;h2[\"h2(t)\" ]--&gt;y[\"y(t)\"];\n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    xx[\"x(t)\" ]--&gt;convolution[\"h1(t)*h2(t)\" ]--&gt;yy[\"y(t)\"];\n    style xx stroke-width:0px\n    style yy stroke-width:0px\nend \n\ng1-.-|equals|g2\n\n\n\n\n\nThe distributive property of the convolution integral.\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x(t)\"]--&gt;h1[\"h1(t)\"] & h2[\"h2(t)\"] \n    h1--&gt;y[\"y(t)\"] \n    h2--&gt;y \n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    xx[\"x(t)\" ]--&gt;addition[\"h1(t)+h2(t)\" ]--&gt;yy[\"y(t)\"];\n    style xx stroke-width:0px\n    style yy stroke-width:0px\nend \n\ng1-.-|equals|g2"
  },
  {
    "objectID": "posts/signal-and-system/index.html#block-diagram-of-discrete-convolution-properties",
    "href": "posts/signal-and-system/index.html#block-diagram-of-discrete-convolution-properties",
    "title": "Signal and System a Primer",
    "section": "2.7 Block diagram of discrete convolution properties",
    "text": "2.7 Block diagram of discrete convolution properties\nThe commutative property\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x[n]\" ]--&gt;h[\"h[n]\" ]--&gt;y[\"y[n]\"];\n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    h1[\"h[n]\" ]--&gt;x1[\"x[n]\" ]--&gt;y1[\"y[n]\"];\n    style h1 stroke-width:0px\n    style y1 stroke-width:0px\nend \n\ng1-.-|equals|g2\n\n\n\n\n\nThe associative property\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x[n]\" ]--&gt;h1[\"h1[n]\" ]--&gt;h2[\"h2[n]\" ]--&gt;y[\"y[n]\"];\n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    xx[\"x[n]\" ]--&gt;convolution[\"h1[n]*h2[n]\" ]--&gt;yy[\"y[n]\"];\n    style xx stroke-width:0px\n    style yy stroke-width:0px\nend \n\ng1-.-|equals|g2\n\n\n\n\n\nThe distributive property\n\n\n\n\nflowchart LR \nsubgraph g1[1]\n    direction LR    \n    x[\"x[n]\"]--&gt;h1[\"h1[n]\"] & h2[\"h2[n]\"] \n    h1--&gt;y[\"y(t)\"] \n    h2--&gt;y \n    style x stroke-width:0px\n    style y stroke-width:0px\nend \n\nsubgraph g2[2]\n    direction LR \n    xx[\"x[n]\" ]--&gt;addition[\"h1[n]+h2[n]\" ]--&gt;yy[\"y[n]\"];\n    style xx stroke-width:0px\n    style yy stroke-width:0px\nend \n\ng1-.-|equals|g2"
  },
  {
    "objectID": "posts/signal-and-system/index.html#deconverlusion",
    "href": "posts/signal-and-system/index.html#deconverlusion",
    "title": "Signal and System a Primer",
    "section": "2.8 Deconverlusion",
    "text": "2.8 Deconverlusion"
  },
  {
    "objectID": "posts/signal-and-system/index.html#deconvolusion",
    "href": "posts/signal-and-system/index.html#deconvolusion",
    "title": "Signal and System a Primer",
    "section": "2.8 Deconvolusion",
    "text": "2.8 Deconvolusion"
  },
  {
    "objectID": "posts/signal-and-system/index.html#deconvolution",
    "href": "posts/signal-and-system/index.html#deconvolution",
    "title": "Signal and System a Primer",
    "section": "2.8 Deconvolution",
    "text": "2.8 Deconvolution"
  }
]